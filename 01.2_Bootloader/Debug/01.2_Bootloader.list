
01.2_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003454  08003454  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003454  08003454  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003454  08003454  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800345c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000011c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008947  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001348  00000000  00000000  000289e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  00029d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  0002a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f35f  00000000  00000000  0002a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087d3  00000000  00000000  00049c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b95ef  00000000  00000000  0005246a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ba59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c1c  00000000  00000000  0010baac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800337c 	.word	0x0800337c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800337c 	.word	0x0800337c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000284:	f000 fa60 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f81e 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f88e 	bl	80003ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f85c 	bl	800034c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(txMsg,"Working in bootloader file\n");
 8000294:	4909      	ldr	r1, [pc, #36]	; (80002bc <main+0x3c>)
 8000296:	480a      	ldr	r0, [pc, #40]	; (80002c0 <main+0x40>)
 8000298:	f002 fc02 	bl	8002aa0 <siprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0x40>)
 800029e:	f7ff ff97 	bl	80001d0 <strlen>
 80002a2:	4603      	mov	r3, r0
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	4905      	ldr	r1, [pc, #20]	; (80002c0 <main+0x40>)
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <main+0x44>)
 80002ac:	f002 f84c 	bl	8002348 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80002b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b4:	f000 faae 	bl	8000814 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 80002b8:	e7f0      	b.n	800029c <main+0x1c>
 80002ba:	bf00      	nop
 80002bc:	08003394 	.word	0x08003394
 80002c0:	20000110 	.word	0x20000110
 80002c4:	2000008c 	.word	0x2000008c

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fbda 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fa:	2300      	movs	r3, #0
 80002fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fd5b 	bl	8000dc4 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000314:	f000 f908 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2302      	movs	r3, #2
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2102      	movs	r1, #2
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fd84 	bl	8001e40 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033e:	f000 f8f3 	bl	8000528 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3740      	adds	r7, #64	; 0x40
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000352:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <MX_USART2_UART_Init+0x5c>)
 8000354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000358:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800035c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000390:	f001 ff8c 	bl	80022ac <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800039a:	f000 f8c5 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	2000008c 	.word	0x2000008c
 80003a8:	40004400 	.word	0x40004400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	; 0x28
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a2e      	ldr	r2, [pc, #184]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a28      	ldr	r2, [pc, #160]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <MX_GPIO_Init+0xd4>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b20      	ldr	r3, [pc, #128]	; (8000480 <MX_GPIO_Init+0xd4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_GPIO_Init+0xd4>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_GPIO_Init+0xd4>)
 8000410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_GPIO_Init+0xd4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2120      	movs	r1, #32
 8000426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042a:	f000 fc9b 	bl	8000d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000434:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <MX_GPIO_Init+0xd8>)
 8000446:	f000 fb1b 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800044a:	2320      	movs	r3, #32
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2300      	movs	r3, #0
 8000458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fb0c 	bl	8000a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	2028      	movs	r0, #40	; 0x28
 800046e:	f000 fad0 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000472:	2028      	movs	r0, #40	; 0x28
 8000474:	f000 fae9 	bl	8000a4a <HAL_NVIC_EnableIRQ>

}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	; 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	48000800 	.word	0x48000800

08000488 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000498:	d101      	bne.n	800049e <HAL_GPIO_EXTI_Callback+0x16>
	{
		applicationStart();
 800049a:	f000 f805 	bl	80004a8 <applicationStart>
	}
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <applicationStart>:

void applicationStart(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0

	sprintf(txMsg,"Application function is invoked\n");
 80004ae:	4918      	ldr	r1, [pc, #96]	; (8000510 <applicationStart+0x68>)
 80004b0:	4818      	ldr	r0, [pc, #96]	; (8000514 <applicationStart+0x6c>)
 80004b2:	f002 faf5 	bl	8002aa0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 80004b6:	4817      	ldr	r0, [pc, #92]	; (8000514 <applicationStart+0x6c>)
 80004b8:	f7ff fe8a 	bl	80001d0 <strlen>
 80004bc:	4603      	mov	r3, r0
 80004be:	b29a      	uxth	r2, r3
 80004c0:	2364      	movs	r3, #100	; 0x64
 80004c2:	4914      	ldr	r1, [pc, #80]	; (8000514 <applicationStart+0x6c>)
 80004c4:	4814      	ldr	r0, [pc, #80]	; (8000518 <applicationStart+0x70>)
 80004c6:	f001 ff3f 	bl	8002348 <HAL_UART_Transmit>

	void (*appResetHandler)(void) = (void*)(*(volatile uint32_t*)(APPADDR + 4));
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <applicationStart+0x74>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	60fb      	str	r3, [r7, #12]

	uint32_t mspValue = *(volatile uint32_t*)APPADDR;
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <applicationStart+0x78>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f383 8808 	msr	MSP, r3
}
 80004e0:	bf00      	nop
	__set_MSP(mspValue);

	sprintf(txMsg,"MPS value is %#x\n",(int)mspValue);
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	461a      	mov	r2, r3
 80004e6:	490f      	ldr	r1, [pc, #60]	; (8000524 <applicationStart+0x7c>)
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <applicationStart+0x6c>)
 80004ea:	f002 fad9 	bl	8002aa0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 80004ee:	4809      	ldr	r0, [pc, #36]	; (8000514 <applicationStart+0x6c>)
 80004f0:	f7ff fe6e 	bl	80001d0 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	4906      	ldr	r1, [pc, #24]	; (8000514 <applicationStart+0x6c>)
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <applicationStart+0x70>)
 80004fe:	f001 ff23 	bl	8002348 <HAL_UART_Transmit>
	appResetHandler();
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	080033b0 	.word	0x080033b0
 8000514:	20000110 	.word	0x20000110
 8000518:	2000008c 	.word	0x2000008c
 800051c:	08005004 	.word	0x08005004
 8000520:	08005000 	.word	0x08005000
 8000524:	080033d4 	.word	0x080033d4

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800056a:	2007      	movs	r0, #7
 800056c:	f000 fa46 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <HAL_UART_MspInit+0x7c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d128      	bne.n	80005f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_UART_MspInit+0x80>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ce:	230c      	movs	r3, #12
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005de:	2307      	movs	r3, #7
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f000 fa48 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	; 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40004400 	.word	0x40004400
 80005fc:	40021000 	.word	0x40021000

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f8c2 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000658:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800065c:	f000 fb9a 	bl	8000d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <_sbrk+0x5c>)
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <_sbrk+0x60>)
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <_sbrk+0x64>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <_sbrk+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d207      	bcs.n	80006a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000694:	f002 f9d2 	bl	8002a3c <__errno>
 8000698:	4603      	mov	r3, r0
 800069a:	220c      	movs	r2, #12
 800069c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	e009      	b.n	80006b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <_sbrk+0x64>)
 80006b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b6:	68fb      	ldr	r3, [r7, #12]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20003000 	.word	0x20003000
 80006c4:	00000400 	.word	0x00000400
 80006c8:	20000174 	.word	0x20000174
 80006cc:	20000190 	.word	0x20000190

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800072c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490e      	ldr	r1, [pc, #56]	; (8000734 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0b      	ldr	r4, [pc, #44]	; (8000740 <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ffd7 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f002 f991 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000726:	f7ff fdab 	bl	8000280 <main>

0800072a <LoopForever>:

LoopForever:
    b LoopForever
 800072a:	e7fe      	b.n	800072a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000738:	0800345c 	.word	0x0800345c
  ldr r2, =_sbss
 800073c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000740:	2000018c 	.word	0x2000018c

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f94f 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff fee6 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f967 	bl	8000a66 <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 f92f 	bl	8000a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000178 	.word	0x20000178

080007fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000178 	.word	0x20000178

08000814 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ffee 	bl	80007fc <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffde 	bl	80007fc <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <__NVIC_EnableIRQ+0x38>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f7ff ff8e 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff29 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff3e 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff8e 	bl	8000950 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff31 	bl	80008c0 <__NVIC_EnableIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ffa2 	bl	80009b8 <SysTick_Config>
 8000a74:	4603      	mov	r3, r0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	e14e      	b.n	8000d2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	2101      	movs	r1, #1
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 8140 	beq.w	8000d28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d005      	beq.n	8000ac0 <HAL_GPIO_Init+0x40>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d130      	bne.n	8000b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	2203      	movs	r2, #3
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000af6:	2201      	movs	r2, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	091b      	lsrs	r3, r3, #4
 8000b0c:	f003 0201 	and.w	r2, r3, #1
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0303 	and.w	r3, r3, #3
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d017      	beq.n	8000b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d123      	bne.n	8000bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3208      	adds	r2, #8
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	220f      	movs	r2, #15
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	6939      	ldr	r1, [r7, #16]
 8000bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0203 	and.w	r2, r3, #3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 809a 	beq.w	8000d28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a54      	ldr	r2, [pc, #336]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c0c:	4a50      	ldr	r2, [pc, #320]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c36:	d013      	beq.n	8000c60 <HAL_GPIO_Init+0x1e0>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a46      	ldr	r2, [pc, #280]	; (8000d54 <HAL_GPIO_Init+0x2d4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00d      	beq.n	8000c5c <HAL_GPIO_Init+0x1dc>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a45      	ldr	r2, [pc, #276]	; (8000d58 <HAL_GPIO_Init+0x2d8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x1d8>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a44      	ldr	r2, [pc, #272]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d101      	bne.n	8000c54 <HAL_GPIO_Init+0x1d4>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1e2>
 8000c54:	2305      	movs	r3, #5
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1e2>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1e2>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1e2>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c80:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca4:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_GPIO_Init+0x2e0>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f aea9 	bne.w	8000a90 <HAL_GPIO_Init+0x10>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d74:	787b      	ldrb	r3, [r7, #1]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb68 	bl	8000488 <HAL_GPIO_EXTI_Callback>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f001 b823 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 817d 	beq.w	80010fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e00:	4bbc      	ldr	r3, [pc, #752]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d00c      	beq.n	8000e26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0c:	4bb9      	ldr	r3, [pc, #740]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d15c      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x10e>
 8000e18:	4bb6      	ldr	r3, [pc, #728]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e24:	d155      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x10e>
 8000e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3e:	fab3 f383 	clz	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	095b      	lsrs	r3, r3, #5
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d102      	bne.n	8000e58 <HAL_RCC_OscConfig+0x94>
 8000e52:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	e015      	b.n	8000e84 <HAL_RCC_OscConfig+0xc0>
 8000e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e64:	fa93 f3a3 	rbit	r3, r3
 8000e68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e78:	fa93 f3a3 	rbit	r3, r3
 8000e7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e80:	4b9c      	ldr	r3, [pc, #624]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e90:	fa92 f2a2 	rbit	r2, r2
 8000e94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	f002 021f 	and.w	r2, r2, #31
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 811f 	beq.w	80010f8 <HAL_RCC_OscConfig+0x334>
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 8116 	bne.w	80010f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f000 bfaf 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12e>
 8000ee4:	4b83      	ldr	r3, [pc, #524]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a82      	ldr	r2, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e036      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
 8000ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x158>
 8000f02:	4b7c      	ldr	r3, [pc, #496]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a7b      	ldr	r2, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a78      	ldr	r2, [pc, #480]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e021      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
 8000f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x184>
 8000f2e:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a70      	ldr	r2, [pc, #448]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6d      	ldr	r2, [pc, #436]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
 8000f48:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a69      	ldr	r2, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f60:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	f023 020f 	bic.w	r2, r3, #15
 8000f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	495f      	ldr	r1, [pc, #380]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d059      	beq.n	800103e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc37 	bl	80007fc <HAL_GetTick>
 8000f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc32 	bl	80007fc <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d902      	bls.n	8000faa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f000 bf43 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 8000faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	095b      	lsrs	r3, r3, #5
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_RCC_OscConfig+0x218>
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0x244>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ff8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001004:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001010:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800101c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0ab      	beq.n	8000f94 <HAL_RCC_OscConfig+0x1d0>
 800103c:	e05d      	b.n	80010fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fbdd 	bl	80007fc <HAL_GetTick>
 8001042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e00a      	b.n	800105e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fbd8 	bl	80007fc <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d902      	bls.n	800105e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	f000 bee9 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800105e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001062:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_RCC_OscConfig+0x2cc>
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	e015      	b.n	80010bc <HAL_RCC_OscConfig+0x2f8>
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f042 0220 	orr.w	r2, r2, #32
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f002 021f 	and.w	r2, r2, #31
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1ab      	bne.n	8001048 <HAL_RCC_OscConfig+0x284>
 80010f0:	e003      	b.n	80010fa <HAL_RCC_OscConfig+0x336>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 817d 	beq.w	800140a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001110:	4ba6      	ldr	r3, [pc, #664]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800111c:	4ba3      	ldr	r3, [pc, #652]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d172      	bne.n	800120e <HAL_RCC_OscConfig+0x44a>
 8001128:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d16c      	bne.n	800120e <HAL_RCC_OscConfig+0x44a>
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001146:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d102      	bne.n	8001164 <HAL_RCC_OscConfig+0x3a0>
 800115e:	4b93      	ldr	r3, [pc, #588]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	e013      	b.n	800118c <HAL_RCC_OscConfig+0x3c8>
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800117c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001188:	4b88      	ldr	r3, [pc, #544]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	2202      	movs	r2, #2
 800118e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001192:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001196:	fa92 f2a2 	rbit	r2, r2
 800119a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800119e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <HAL_RCC_OscConfig+0x410>
 80011be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d002      	beq.n	80011d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f000 be2e 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b75      	ldr	r3, [pc, #468]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	21f8      	movs	r1, #248	; 0xf8
 80011ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011f2:	fa91 f1a1 	rbit	r1, r1
 80011f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011fe:	fab1 f181 	clz	r1, r1
 8001202:	b2c9      	uxtb	r1, r1
 8001204:	408b      	lsls	r3, r1
 8001206:	4969      	ldr	r1, [pc, #420]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120c:	e0fd      	b.n	800140a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8088 	beq.w	8001330 <HAL_RCC_OscConfig+0x56c>
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001232:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	2301      	movs	r3, #1
 800124a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fad6 	bl	80007fc <HAL_GetTick>
 8001250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fad1 	bl	80007fc <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d902      	bls.n	800126c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	f000 bde2 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800127e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	095b      	lsrs	r3, r3, #5
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d102      	bne.n	800129c <HAL_RCC_OscConfig+0x4d8>
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	e013      	b.n	80012c4 <HAL_RCC_OscConfig+0x500>
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2202      	movs	r2, #2
 80012c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	f002 021f 	and.w	r2, r2, #31
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0af      	beq.n	8001256 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	21f8      	movs	r1, #248	; 0xf8
 800130c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001314:	fa91 f1a1 	rbit	r1, r1
 8001318:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800131c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001320:	fab1 f181 	clz	r1, r1
 8001324:	b2c9      	uxtb	r1, r1
 8001326:	408b      	lsls	r3, r1
 8001328:	4920      	ldr	r1, [pc, #128]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
 800132e:	e06c      	b.n	800140a <HAL_RCC_OscConfig+0x646>
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	2300      	movs	r3, #0
 800135a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fa4e 	bl	80007fc <HAL_GetTick>
 8001360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fa49 	bl	80007fc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d902      	bls.n	800137c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	f000 bd5a 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800138e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d104      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5ec>
 80013a6:	4b01      	ldr	r3, [pc, #4]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	e015      	b.n	80013d8 <HAL_RCC_OscConfig+0x614>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013cc:	fa93 f3a3 	rbit	r3, r3
 80013d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013d4:	4bc8      	ldr	r3, [pc, #800]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2202      	movs	r2, #2
 80013da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013e2:	fa92 f2a2 	rbit	r2, r2
 80013e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013ee:	fab2 f282 	clz	r2, r2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	f042 0220 	orr.w	r2, r2, #32
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	f002 021f 	and.w	r2, r2, #31
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ad      	bne.n	8001366 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8110 	beq.w	8001640 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d079      	beq.n	8001524 <HAL_RCC_OscConfig+0x760>
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4bab      	ldr	r3, [pc, #684]	; (80016fc <HAL_RCC_OscConfig+0x938>)
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	2301      	movs	r3, #1
 8001458:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff f9cf 	bl	80007fc <HAL_GetTick>
 800145e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff f9ca 	bl	80007fc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d902      	bls.n	800147a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	f000 bcdb 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001494:	2202      	movs	r2, #2
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fa93 f2a3 	rbit	r2, r3
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014b8:	2202      	movs	r2, #2
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80014d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014e0:	2102      	movs	r1, #2
 80014e2:	6019      	str	r1, [r3, #0]
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f1a3 	rbit	r1, r3
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014fa:	6019      	str	r1, [r3, #0]
  return result;
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0a0      	beq.n	8001464 <HAL_RCC_OscConfig+0x6a0>
 8001522:	e08d      	b.n	8001640 <HAL_RCC_OscConfig+0x87c>
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001546:	601a      	str	r2, [r3, #0]
  return result;
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001550:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x938>)
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	461a      	mov	r2, r3
 8001562:	2300      	movs	r3, #0
 8001564:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff f949 	bl	80007fc <HAL_GetTick>
 800156a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff f944 	bl	80007fc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d902      	bls.n	8001586 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	f000 bc55 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015d6:	2202      	movs	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80015f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015fe:	2102      	movs	r1, #2
 8001600:	6019      	str	r1, [r3, #0]
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f1a3 	rbit	r1, r3
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001618:	6019      	str	r1, [r3, #0]
  return result;
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2101      	movs	r1, #1
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d197      	bne.n	8001570 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 81a1 	beq.w	8001998 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d116      	bne.n	8001696 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 800166e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001672:	61d3      	str	r3, [r2, #28]
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800168e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f8a5 	bl	80007fc <HAL_GetTick>
 80016b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	e009      	b.n	80016cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff f8a0 	bl	80007fc <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e3b1      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10d      	bne.n	8001704 <HAL_RCC_OscConfig+0x940>
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e03c      	b.n	8001770 <HAL_RCC_OscConfig+0x9ac>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	10908120 	.word	0x10908120
 8001700:	40007000 	.word	0x40007000
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x96a>
 8001714:	4bc1      	ldr	r3, [pc, #772]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4ac0      	ldr	r2, [pc, #768]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	4bbe      	ldr	r3, [pc, #760]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4abd      	ldr	r2, [pc, #756]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e020      	b.n	8001770 <HAL_RCC_OscConfig+0x9ac>
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x994>
 800173e:	4bb7      	ldr	r3, [pc, #732]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4ab6      	ldr	r2, [pc, #728]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4bb4      	ldr	r3, [pc, #720]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4ab3      	ldr	r2, [pc, #716]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x9ac>
 8001758:	4bb0      	ldr	r3, [pc, #704]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4aaf      	ldr	r2, [pc, #700]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	4bad      	ldr	r3, [pc, #692]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4aac      	ldr	r2, [pc, #688]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8081 	beq.w	8001884 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff f83b 	bl	80007fc <HAL_GetTick>
 8001786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff f836 	bl	80007fc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e345      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017ea:	601a      	str	r2, [r3, #0]
  return result;
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d102      	bne.n	8001810 <HAL_RCC_OscConfig+0xa4c>
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	e013      	b.n	8001838 <HAL_RCC_OscConfig+0xa74>
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001818:	2202      	movs	r2, #2
 800181a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800183c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001840:	2102      	movs	r1, #2
 8001842:	6011      	str	r1, [r2, #0]
 8001844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001848:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	fa92 f1a2 	rbit	r1, r2
 8001852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001856:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800185a:	6011      	str	r1, [r2, #0]
  return result;
 800185c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001860:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f002 021f 	and.w	r2, r2, #31
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d084      	beq.n	800178c <HAL_RCC_OscConfig+0x9c8>
 8001882:	e07f      	b.n	8001984 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7fe ffba 	bl	80007fc <HAL_GetTick>
 8001888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7fe ffb5 	bl	80007fc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e2c4      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018ec:	601a      	str	r2, [r3, #0]
  return result;
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0xb4e>
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	e013      	b.n	800193a <HAL_RCC_OscConfig+0xb76>
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	fa93 f2a3 	rbit	r2, r3
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001942:	2102      	movs	r1, #2
 8001944:	6011      	str	r1, [r2, #0]
 8001946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	fa92 f1a2 	rbit	r1, r2
 8001954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001958:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800195c:	6011      	str	r1, [r2, #0]
  return result;
 800195e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001962:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fab2 f282 	clz	r2, r2
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f002 021f 	and.w	r2, r2, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d184      	bne.n	800188e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001984:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001996:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8242 	beq.w	8001e2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	f000 8213 	beq.w	8001dde <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	f040 8162 	bne.w	8001c8e <HAL_RCC_OscConfig+0xeca>
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fef4 	bl	80007fc <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	e00c      	b.n	8001a34 <HAL_RCC_OscConfig+0xc70>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7fe feec 	bl	80007fc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1fd      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a58:	601a      	str	r2, [r3, #0]
  return result;
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_OscConfig+0xcba>
 8001a78:	4bb0      	ldr	r3, [pc, #704]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e027      	b.n	8001ace <HAL_RCC_OscConfig+0xd0a>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ad6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ada:	6011      	str	r1, [r2, #0]
 8001adc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	fa92 f1a2 	rbit	r1, r2
 8001aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001af2:	6011      	str	r1, [r2, #0]
  return result;
 8001af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	fab2 f282 	clz	r2, r2
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f042 0220 	orr.w	r2, r2, #32
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f002 021f 	and.w	r2, r2, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d182      	bne.n	8001a20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1a:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	497f      	ldr	r1, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	2301      	movs	r3, #1
 8001b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe fe38 	bl	80007fc <HAL_GetTick>
 8001b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe fe33 	bl	80007fc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e144      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bca:	601a      	str	r2, [r3, #0]
  return result;
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xe2c>
 8001bea:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e027      	b.n	8001c40 <HAL_RCC_OscConfig+0xe7c>
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	fa92 f1a2 	rbit	r1, r2
 8001c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c64:	6011      	str	r1, [r2, #0]
  return result;
 8001c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f002 021f 	and.w	r2, r2, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d082      	beq.n	8001b92 <HAL_RCC_OscConfig+0xdce>
 8001c8c:	e0cf      	b.n	8001e2e <HAL_RCC_OscConfig+0x106a>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fd92 	bl	80007fc <HAL_GetTick>
 8001cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	e009      	b.n	8001cf2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cde:	f7fe fd8d 	bl	80007fc <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e09e      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d16:	601a      	str	r2, [r3, #0]
  return result;
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d104      	bne.n	8001d40 <HAL_RCC_OscConfig+0xf7c>
 8001d36:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	e029      	b.n	8001d90 <HAL_RCC_OscConfig+0xfcc>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_OscConfig+0x1078>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d9c:	6011      	str	r1, [r2, #0]
 8001d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	fa92 f1a2 	rbit	r1, r2
 8001dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001db4:	6011      	str	r1, [r2, #0]
  return result;
 8001db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d180      	bne.n	8001cde <HAL_RCC_OscConfig+0xf1a>
 8001ddc:	e027      	b.n	8001e2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01e      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_OscConfig+0x1078>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dfe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d10b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b09e      	sub	sp, #120	; 0x78
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e162      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b90      	ldr	r3, [pc, #576]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b8d      	ldr	r3, [pc, #564]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	498b      	ldr	r1, [pc, #556]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e14a      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	497f      	ldr	r1, [pc, #508]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80dc 	beq.w	800206c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d13c      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xf6>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xa6>
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e00f      	b.n	8001f06 <HAL_RCC_ClockConfig+0xc6>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8001efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d17b      	bne.n	800202a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0f3      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d13c      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x178>
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x128>
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_ClockConfig+0x148>
 8001f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
 8001f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d13a      	bne.n	800202a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b2      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x1a0>
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	e00d      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1bc>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	61ba      	str	r2, [r7, #24]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	617a      	str	r2, [r7, #20]
  return result;
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e079      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	491a      	ldr	r1, [pc, #104]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7fe fbde 	bl	80007fc <HAL_GetTick>
 8002040:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe fbda 	bl	80007fc <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e061      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d214      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4906      	ldr	r1, [pc, #24]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e040      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	491a      	ldr	r1, [pc, #104]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4912      	ldr	r1, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020e2:	f000 f829 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020e6:	4601      	mov	r1, r0
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	22f0      	movs	r2, #240	; 0xf0
 80020f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	fa92 f2a2 	rbit	r2, r2
 80020fa:	60fa      	str	r2, [r7, #12]
  return result;
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	40d3      	lsrs	r3, r2
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	fa21 f303 	lsr.w	r3, r1, r3
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_ClockConfig+0x2f0>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_ClockConfig+0x2f4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb2c 	bl	8000774 <HAL_InitTick>
  
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3778      	adds	r7, #120	; 0x78
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	080033e8 	.word	0x080033e8
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	; 0x2c
 800213c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x30>
 8002162:	2b08      	cmp	r3, #8
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x36>
 8002166:	e03c      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800216a:	623b      	str	r3, [r7, #32]
      break;
 800216c:	e03c      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002174:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002178:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	607a      	str	r2, [r7, #4]
  return result;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	40d3      	lsrs	r3, r2
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_RCC_GetSysClockFreq+0xc8>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	220f      	movs	r2, #15
 800219c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	fa92 f2a2 	rbit	r2, r2
 80021a4:	60fa      	str	r2, [r7, #12]
  return result;
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	40d3      	lsrs	r3, r2
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	e004      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	623b      	str	r3, [r7, #32]
      break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e4:	623b      	str	r3, [r7, #32]
      break;
 80021e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	372c      	adds	r7, #44	; 0x2c
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	08003400 	.word	0x08003400
 8002204:	08003410 	.word	0x08003410
 8002208:	003d0900 	.word	0x003d0900

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800222a:	f7ff ffef 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002238:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800223c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	fa92 f2a2 	rbit	r2, r2
 8002244:	603a      	str	r2, [r7, #0]
  return result;
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	fab2 f282 	clz	r2, r2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	40d3      	lsrs	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	080033f8 	.word	0x080033f8

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800226e:	f7ff ffcd 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800227c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002280:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	603a      	str	r2, [r7, #0]
  return result;
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	40d3      	lsrs	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	080033f8 	.word	0x080033f8

080022ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e040      	b.n	8002340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe f954 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8c0 	bl	8002470 <UART_SetConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e022      	b.n	8002340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9ea 	bl	80026dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fa71 	bl	8002820 <UART_CheckIdleState>
 800233e:	4603      	mov	r3, r0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235c:	2b20      	cmp	r3, #32
 800235e:	f040 8082 	bne.w	8002466 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_UART_Transmit+0x26>
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07a      	b.n	8002468 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_UART_Transmit+0x38>
 800237c:	2302      	movs	r3, #2
 800237e:	e073      	b.n	8002468 <HAL_UART_Transmit+0x120>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2221      	movs	r2, #33	; 0x21
 8002394:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002396:	f7fe fa31 	bl	80007fc <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b4:	d108      	bne.n	80023c8 <HAL_UART_Transmit+0x80>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	e003      	b.n	80023d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80023d8:	e02d      	b.n	8002436 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fa64 	bl	80028b2 <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e039      	b.n	8002468 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002406:	b292      	uxth	r2, r2
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3302      	adds	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e008      	b.n	8002424 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b292      	uxth	r2, r2
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1cb      	bne.n	80023da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	2140      	movs	r1, #64	; 0x40
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fa30 	bl	80028b2 <UART_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e005      	b.n	8002468 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <UART_SetConfig+0x254>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a78      	ldr	r2, [pc, #480]	; (80026c8 <UART_SetConfig+0x258>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d120      	bne.n	800252e <UART_SetConfig+0xbe>
 80024ec:	4b77      	ldr	r3, [pc, #476]	; (80026cc <UART_SetConfig+0x25c>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d817      	bhi.n	8002528 <UART_SetConfig+0xb8>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <UART_SetConfig+0x90>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002511 	.word	0x08002511
 8002504:	0800251d 	.word	0x0800251d
 8002508:	08002523 	.word	0x08002523
 800250c:	08002517 	.word	0x08002517
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
 8002514:	e01d      	b.n	8002552 <UART_SetConfig+0xe2>
 8002516:	2302      	movs	r3, #2
 8002518:	77fb      	strb	r3, [r7, #31]
 800251a:	e01a      	b.n	8002552 <UART_SetConfig+0xe2>
 800251c:	2304      	movs	r3, #4
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	e017      	b.n	8002552 <UART_SetConfig+0xe2>
 8002522:	2308      	movs	r3, #8
 8002524:	77fb      	strb	r3, [r7, #31]
 8002526:	e014      	b.n	8002552 <UART_SetConfig+0xe2>
 8002528:	2310      	movs	r3, #16
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e011      	b.n	8002552 <UART_SetConfig+0xe2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a67      	ldr	r2, [pc, #412]	; (80026d0 <UART_SetConfig+0x260>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d102      	bne.n	800253e <UART_SetConfig+0xce>
 8002538:	2300      	movs	r3, #0
 800253a:	77fb      	strb	r3, [r7, #31]
 800253c:	e009      	b.n	8002552 <UART_SetConfig+0xe2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a64      	ldr	r2, [pc, #400]	; (80026d4 <UART_SetConfig+0x264>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <UART_SetConfig+0xde>
 8002548:	2300      	movs	r3, #0
 800254a:	77fb      	strb	r3, [r7, #31]
 800254c:	e001      	b.n	8002552 <UART_SetConfig+0xe2>
 800254e:	2310      	movs	r3, #16
 8002550:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d15b      	bne.n	8002614 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800255c:	7ffb      	ldrb	r3, [r7, #31]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d827      	bhi.n	80025b2 <UART_SetConfig+0x142>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <UART_SetConfig+0xf8>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800258d 	.word	0x0800258d
 800256c:	08002595 	.word	0x08002595
 8002570:	0800259d 	.word	0x0800259d
 8002574:	080025b3 	.word	0x080025b3
 8002578:	080025a3 	.word	0x080025a3
 800257c:	080025b3 	.word	0x080025b3
 8002580:	080025b3 	.word	0x080025b3
 8002584:	080025b3 	.word	0x080025b3
 8002588:	080025ab 	.word	0x080025ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258c:	f7ff fe4a 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002590:	61b8      	str	r0, [r7, #24]
        break;
 8002592:	e013      	b.n	80025bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002594:	f7ff fe68 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8002598:	61b8      	str	r0, [r7, #24]
        break;
 800259a:	e00f      	b.n	80025bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <UART_SetConfig+0x268>)
 800259e:	61bb      	str	r3, [r7, #24]
        break;
 80025a0:	e00c      	b.n	80025bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a2:	f7ff fdc9 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80025a6:	61b8      	str	r0, [r7, #24]
        break;
 80025a8:	e008      	b.n	80025bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ae:	61bb      	str	r3, [r7, #24]
        break;
 80025b0:	e004      	b.n	80025bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	77bb      	strb	r3, [r7, #30]
        break;
 80025ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d074      	beq.n	80026ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	441a      	add	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b0f      	cmp	r3, #15
 80025de:	d916      	bls.n	800260e <UART_SetConfig+0x19e>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d212      	bcs.n	800260e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f023 030f 	bic.w	r3, r3, #15
 80025f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	4313      	orrs	r3, r2
 8002602:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	89fa      	ldrh	r2, [r7, #14]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	e04e      	b.n	80026ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	77bb      	strb	r3, [r7, #30]
 8002612:	e04b      	b.n	80026ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d827      	bhi.n	800266a <UART_SetConfig+0x1fa>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <UART_SetConfig+0x1b0>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002645 	.word	0x08002645
 8002624:	0800264d 	.word	0x0800264d
 8002628:	08002655 	.word	0x08002655
 800262c:	0800266b 	.word	0x0800266b
 8002630:	0800265b 	.word	0x0800265b
 8002634:	0800266b 	.word	0x0800266b
 8002638:	0800266b 	.word	0x0800266b
 800263c:	0800266b 	.word	0x0800266b
 8002640:	08002663 	.word	0x08002663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002644:	f7ff fdee 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002648:	61b8      	str	r0, [r7, #24]
        break;
 800264a:	e013      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800264c:	f7ff fe0c 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8002650:	61b8      	str	r0, [r7, #24]
        break;
 8002652:	e00f      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <UART_SetConfig+0x268>)
 8002656:	61bb      	str	r3, [r7, #24]
        break;
 8002658:	e00c      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800265a:	f7ff fd6d 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800265e:	61b8      	str	r0, [r7, #24]
        break;
 8002660:	e008      	b.n	8002674 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	61bb      	str	r3, [r7, #24]
        break;
 8002668:	e004      	b.n	8002674 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	77bb      	strb	r3, [r7, #30]
        break;
 8002672:	bf00      	nop
    }

    if (pclk != 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d018      	beq.n	80026ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	085a      	lsrs	r2, r3, #1
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	441a      	add	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	b29b      	uxth	r3, r3
 800268e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	d908      	bls.n	80026a8 <UART_SetConfig+0x238>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d204      	bcs.n	80026a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e001      	b.n	80026ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	efff69f3 	.word	0xefff69f3
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40004400 	.word	0x40004400
 80026d4:	40004800 	.word	0x40004800
 80026d8:	007a1200 	.word	0x007a1200

080026dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01a      	beq.n	80027f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027da:	d10a      	bne.n	80027f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
  }
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002830:	f7fd ffe4 	bl	80007fc <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b08      	cmp	r3, #8
 8002842:	d10e      	bne.n	8002862 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f82d 	bl	80028b2 <UART_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e023      	b.n	80028aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d10e      	bne.n	800288e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f817 	bl	80028b2 <UART_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00d      	b.n	80028aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b09c      	sub	sp, #112	; 0x70
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c2:	e0a5      	b.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	f000 80a1 	beq.w	8002a10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7fd ff95 	bl	80007fc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80028de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13e      	bne.n	8002962 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80028f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028f8:	667b      	str	r3, [r7, #100]	; 0x64
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002904:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800290a:	e841 2300 	strex	r3, r2, [r1]
 800290e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e6      	bne.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3308      	adds	r3, #8
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	663b      	str	r3, [r7, #96]	; 0x60
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3308      	adds	r3, #8
 8002934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002936:	64ba      	str	r2, [r7, #72]	; 0x48
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800293c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e067      	b.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d04f      	beq.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297e:	d147      	bne.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002988:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800299e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e6      	bne.n	800298a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3308      	adds	r3, #8
 80029c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	613b      	str	r3, [r7, #16]
   return(result);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3308      	adds	r3, #8
 80029da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029dc:	623a      	str	r2, [r7, #32]
 80029de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	69f9      	ldr	r1, [r7, #28]
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e010      	b.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	f43f af4a 	beq.w	80028c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3770      	adds	r7, #112	; 0x70
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <__errno>:
 8002a3c:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <__errno+0x8>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000000c 	.word	0x2000000c

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4d0d      	ldr	r5, [pc, #52]	; (8002a80 <__libc_init_array+0x38>)
 8002a4c:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	2600      	movs	r6, #0
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	4d0b      	ldr	r5, [pc, #44]	; (8002a88 <__libc_init_array+0x40>)
 8002a5a:	4c0c      	ldr	r4, [pc, #48]	; (8002a8c <__libc_init_array+0x44>)
 8002a5c:	f000 fc8e 	bl	800337c <_init>
 8002a60:	1b64      	subs	r4, r4, r5
 8002a62:	10a4      	asrs	r4, r4, #2
 8002a64:	2600      	movs	r6, #0
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08003454 	.word	0x08003454
 8002a84:	08003454 	.word	0x08003454
 8002a88:	08003454 	.word	0x08003454
 8002a8c:	08003458 	.word	0x08003458

08002a90 <memset>:
 8002a90:	4402      	add	r2, r0
 8002a92:	4603      	mov	r3, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <siprintf>:
 8002aa0:	b40e      	push	{r1, r2, r3}
 8002aa2:	b500      	push	{lr}
 8002aa4:	b09c      	sub	sp, #112	; 0x70
 8002aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8002aa8:	9002      	str	r0, [sp, #8]
 8002aaa:	9006      	str	r0, [sp, #24]
 8002aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ab0:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <siprintf+0x38>)
 8002ab2:	9107      	str	r1, [sp, #28]
 8002ab4:	9104      	str	r1, [sp, #16]
 8002ab6:	4909      	ldr	r1, [pc, #36]	; (8002adc <siprintf+0x3c>)
 8002ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002abc:	9105      	str	r1, [sp, #20]
 8002abe:	6800      	ldr	r0, [r0, #0]
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	a902      	add	r1, sp, #8
 8002ac4:	f000 f868 	bl	8002b98 <_svfiprintf_r>
 8002ac8:	9b02      	ldr	r3, [sp, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	b01c      	add	sp, #112	; 0x70
 8002ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad4:	b003      	add	sp, #12
 8002ad6:	4770      	bx	lr
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	ffff0208 	.word	0xffff0208

08002ae0 <__ssputs_r>:
 8002ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae4:	688e      	ldr	r6, [r1, #8]
 8002ae6:	429e      	cmp	r6, r3
 8002ae8:	4682      	mov	sl, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	4690      	mov	r8, r2
 8002aee:	461f      	mov	r7, r3
 8002af0:	d838      	bhi.n	8002b64 <__ssputs_r+0x84>
 8002af2:	898a      	ldrh	r2, [r1, #12]
 8002af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002af8:	d032      	beq.n	8002b60 <__ssputs_r+0x80>
 8002afa:	6825      	ldr	r5, [r4, #0]
 8002afc:	6909      	ldr	r1, [r1, #16]
 8002afe:	eba5 0901 	sub.w	r9, r5, r1
 8002b02:	6965      	ldr	r5, [r4, #20]
 8002b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	444b      	add	r3, r9
 8002b10:	106d      	asrs	r5, r5, #1
 8002b12:	429d      	cmp	r5, r3
 8002b14:	bf38      	it	cc
 8002b16:	461d      	movcc	r5, r3
 8002b18:	0553      	lsls	r3, r2, #21
 8002b1a:	d531      	bpl.n	8002b80 <__ssputs_r+0xa0>
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f000 fb63 	bl	80031e8 <_malloc_r>
 8002b22:	4606      	mov	r6, r0
 8002b24:	b950      	cbnz	r0, 8002b3c <__ssputs_r+0x5c>
 8002b26:	230c      	movs	r3, #12
 8002b28:	f8ca 3000 	str.w	r3, [sl]
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b32:	81a3      	strh	r3, [r4, #12]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3c:	6921      	ldr	r1, [r4, #16]
 8002b3e:	464a      	mov	r2, r9
 8002b40:	f000 fabe 	bl	80030c0 <memcpy>
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	81a3      	strh	r3, [r4, #12]
 8002b50:	6126      	str	r6, [r4, #16]
 8002b52:	6165      	str	r5, [r4, #20]
 8002b54:	444e      	add	r6, r9
 8002b56:	eba5 0509 	sub.w	r5, r5, r9
 8002b5a:	6026      	str	r6, [r4, #0]
 8002b5c:	60a5      	str	r5, [r4, #8]
 8002b5e:	463e      	mov	r6, r7
 8002b60:	42be      	cmp	r6, r7
 8002b62:	d900      	bls.n	8002b66 <__ssputs_r+0x86>
 8002b64:	463e      	mov	r6, r7
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	4632      	mov	r2, r6
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	f000 fab6 	bl	80030dc <memmove>
 8002b70:	68a3      	ldr	r3, [r4, #8]
 8002b72:	1b9b      	subs	r3, r3, r6
 8002b74:	60a3      	str	r3, [r4, #8]
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	4433      	add	r3, r6
 8002b7a:	6023      	str	r3, [r4, #0]
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e7db      	b.n	8002b38 <__ssputs_r+0x58>
 8002b80:	462a      	mov	r2, r5
 8002b82:	f000 fba5 	bl	80032d0 <_realloc_r>
 8002b86:	4606      	mov	r6, r0
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d1e1      	bne.n	8002b50 <__ssputs_r+0x70>
 8002b8c:	6921      	ldr	r1, [r4, #16]
 8002b8e:	4650      	mov	r0, sl
 8002b90:	f000 fabe 	bl	8003110 <_free_r>
 8002b94:	e7c7      	b.n	8002b26 <__ssputs_r+0x46>
	...

08002b98 <_svfiprintf_r>:
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9c:	4698      	mov	r8, r3
 8002b9e:	898b      	ldrh	r3, [r1, #12]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	b09d      	sub	sp, #116	; 0x74
 8002ba4:	4607      	mov	r7, r0
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	d50e      	bpl.n	8002bca <_svfiprintf_r+0x32>
 8002bac:	690b      	ldr	r3, [r1, #16]
 8002bae:	b963      	cbnz	r3, 8002bca <_svfiprintf_r+0x32>
 8002bb0:	2140      	movs	r1, #64	; 0x40
 8002bb2:	f000 fb19 	bl	80031e8 <_malloc_r>
 8002bb6:	6028      	str	r0, [r5, #0]
 8002bb8:	6128      	str	r0, [r5, #16]
 8002bba:	b920      	cbnz	r0, 8002bc6 <_svfiprintf_r+0x2e>
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	e0d1      	b.n	8002d6a <_svfiprintf_r+0x1d2>
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	616b      	str	r3, [r5, #20]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bce:	2320      	movs	r3, #32
 8002bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bd8:	2330      	movs	r3, #48	; 0x30
 8002bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002d84 <_svfiprintf_r+0x1ec>
 8002bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002be2:	f04f 0901 	mov.w	r9, #1
 8002be6:	4623      	mov	r3, r4
 8002be8:	469a      	mov	sl, r3
 8002bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bee:	b10a      	cbz	r2, 8002bf4 <_svfiprintf_r+0x5c>
 8002bf0:	2a25      	cmp	r2, #37	; 0x25
 8002bf2:	d1f9      	bne.n	8002be8 <_svfiprintf_r+0x50>
 8002bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8002bf8:	d00b      	beq.n	8002c12 <_svfiprintf_r+0x7a>
 8002bfa:	465b      	mov	r3, fp
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4638      	mov	r0, r7
 8002c02:	f7ff ff6d 	bl	8002ae0 <__ssputs_r>
 8002c06:	3001      	adds	r0, #1
 8002c08:	f000 80aa 	beq.w	8002d60 <_svfiprintf_r+0x1c8>
 8002c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c0e:	445a      	add	r2, fp
 8002c10:	9209      	str	r2, [sp, #36]	; 0x24
 8002c12:	f89a 3000 	ldrb.w	r3, [sl]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a2 	beq.w	8002d60 <_svfiprintf_r+0x1c8>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c26:	f10a 0a01 	add.w	sl, sl, #1
 8002c2a:	9304      	str	r3, [sp, #16]
 8002c2c:	9307      	str	r3, [sp, #28]
 8002c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c32:	931a      	str	r3, [sp, #104]	; 0x68
 8002c34:	4654      	mov	r4, sl
 8002c36:	2205      	movs	r2, #5
 8002c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c3c:	4851      	ldr	r0, [pc, #324]	; (8002d84 <_svfiprintf_r+0x1ec>)
 8002c3e:	f7fd facf 	bl	80001e0 <memchr>
 8002c42:	9a04      	ldr	r2, [sp, #16]
 8002c44:	b9d8      	cbnz	r0, 8002c7e <_svfiprintf_r+0xe6>
 8002c46:	06d0      	lsls	r0, r2, #27
 8002c48:	bf44      	itt	mi
 8002c4a:	2320      	movmi	r3, #32
 8002c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c50:	0711      	lsls	r1, r2, #28
 8002c52:	bf44      	itt	mi
 8002c54:	232b      	movmi	r3, #43	; 0x2b
 8002c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c60:	d015      	beq.n	8002c8e <_svfiprintf_r+0xf6>
 8002c62:	9a07      	ldr	r2, [sp, #28]
 8002c64:	4654      	mov	r4, sl
 8002c66:	2000      	movs	r0, #0
 8002c68:	f04f 0c0a 	mov.w	ip, #10
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c72:	3b30      	subs	r3, #48	; 0x30
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	d94e      	bls.n	8002d16 <_svfiprintf_r+0x17e>
 8002c78:	b1b0      	cbz	r0, 8002ca8 <_svfiprintf_r+0x110>
 8002c7a:	9207      	str	r2, [sp, #28]
 8002c7c:	e014      	b.n	8002ca8 <_svfiprintf_r+0x110>
 8002c7e:	eba0 0308 	sub.w	r3, r0, r8
 8002c82:	fa09 f303 	lsl.w	r3, r9, r3
 8002c86:	4313      	orrs	r3, r2
 8002c88:	9304      	str	r3, [sp, #16]
 8002c8a:	46a2      	mov	sl, r4
 8002c8c:	e7d2      	b.n	8002c34 <_svfiprintf_r+0x9c>
 8002c8e:	9b03      	ldr	r3, [sp, #12]
 8002c90:	1d19      	adds	r1, r3, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	9103      	str	r1, [sp, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bfbb      	ittet	lt
 8002c9a:	425b      	neglt	r3, r3
 8002c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8002ca0:	9307      	strge	r3, [sp, #28]
 8002ca2:	9307      	strlt	r3, [sp, #28]
 8002ca4:	bfb8      	it	lt
 8002ca6:	9204      	strlt	r2, [sp, #16]
 8002ca8:	7823      	ldrb	r3, [r4, #0]
 8002caa:	2b2e      	cmp	r3, #46	; 0x2e
 8002cac:	d10c      	bne.n	8002cc8 <_svfiprintf_r+0x130>
 8002cae:	7863      	ldrb	r3, [r4, #1]
 8002cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb2:	d135      	bne.n	8002d20 <_svfiprintf_r+0x188>
 8002cb4:	9b03      	ldr	r3, [sp, #12]
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	9203      	str	r2, [sp, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bfb8      	it	lt
 8002cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cc4:	3402      	adds	r4, #2
 8002cc6:	9305      	str	r3, [sp, #20]
 8002cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d94 <_svfiprintf_r+0x1fc>
 8002ccc:	7821      	ldrb	r1, [r4, #0]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	4650      	mov	r0, sl
 8002cd2:	f7fd fa85 	bl	80001e0 <memchr>
 8002cd6:	b140      	cbz	r0, 8002cea <_svfiprintf_r+0x152>
 8002cd8:	2340      	movs	r3, #64	; 0x40
 8002cda:	eba0 000a 	sub.w	r0, r0, sl
 8002cde:	fa03 f000 	lsl.w	r0, r3, r0
 8002ce2:	9b04      	ldr	r3, [sp, #16]
 8002ce4:	4303      	orrs	r3, r0
 8002ce6:	3401      	adds	r4, #1
 8002ce8:	9304      	str	r3, [sp, #16]
 8002cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cee:	4826      	ldr	r0, [pc, #152]	; (8002d88 <_svfiprintf_r+0x1f0>)
 8002cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cf4:	2206      	movs	r2, #6
 8002cf6:	f7fd fa73 	bl	80001e0 <memchr>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d038      	beq.n	8002d70 <_svfiprintf_r+0x1d8>
 8002cfe:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <_svfiprintf_r+0x1f4>)
 8002d00:	bb1b      	cbnz	r3, 8002d4a <_svfiprintf_r+0x1b2>
 8002d02:	9b03      	ldr	r3, [sp, #12]
 8002d04:	3307      	adds	r3, #7
 8002d06:	f023 0307 	bic.w	r3, r3, #7
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	9303      	str	r3, [sp, #12]
 8002d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d10:	4433      	add	r3, r6
 8002d12:	9309      	str	r3, [sp, #36]	; 0x24
 8002d14:	e767      	b.n	8002be6 <_svfiprintf_r+0x4e>
 8002d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	e7a5      	b.n	8002c6c <_svfiprintf_r+0xd4>
 8002d20:	2300      	movs	r3, #0
 8002d22:	3401      	adds	r4, #1
 8002d24:	9305      	str	r3, [sp, #20]
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 0c0a 	mov.w	ip, #10
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d32:	3a30      	subs	r2, #48	; 0x30
 8002d34:	2a09      	cmp	r2, #9
 8002d36:	d903      	bls.n	8002d40 <_svfiprintf_r+0x1a8>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0c5      	beq.n	8002cc8 <_svfiprintf_r+0x130>
 8002d3c:	9105      	str	r1, [sp, #20]
 8002d3e:	e7c3      	b.n	8002cc8 <_svfiprintf_r+0x130>
 8002d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d44:	4604      	mov	r4, r0
 8002d46:	2301      	movs	r3, #1
 8002d48:	e7f0      	b.n	8002d2c <_svfiprintf_r+0x194>
 8002d4a:	ab03      	add	r3, sp, #12
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	462a      	mov	r2, r5
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <_svfiprintf_r+0x1f8>)
 8002d52:	a904      	add	r1, sp, #16
 8002d54:	4638      	mov	r0, r7
 8002d56:	f3af 8000 	nop.w
 8002d5a:	1c42      	adds	r2, r0, #1
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	d1d6      	bne.n	8002d0e <_svfiprintf_r+0x176>
 8002d60:	89ab      	ldrh	r3, [r5, #12]
 8002d62:	065b      	lsls	r3, r3, #25
 8002d64:	f53f af2c 	bmi.w	8002bc0 <_svfiprintf_r+0x28>
 8002d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d6a:	b01d      	add	sp, #116	; 0x74
 8002d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d70:	ab03      	add	r3, sp, #12
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	462a      	mov	r2, r5
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <_svfiprintf_r+0x1f8>)
 8002d78:	a904      	add	r1, sp, #16
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	f000 f87a 	bl	8002e74 <_printf_i>
 8002d80:	e7eb      	b.n	8002d5a <_svfiprintf_r+0x1c2>
 8002d82:	bf00      	nop
 8002d84:	08003420 	.word	0x08003420
 8002d88:	0800342a 	.word	0x0800342a
 8002d8c:	00000000 	.word	0x00000000
 8002d90:	08002ae1 	.word	0x08002ae1
 8002d94:	08003426 	.word	0x08003426

08002d98 <_printf_common>:
 8002d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d9c:	4616      	mov	r6, r2
 8002d9e:	4699      	mov	r9, r3
 8002da0:	688a      	ldr	r2, [r1, #8]
 8002da2:	690b      	ldr	r3, [r1, #16]
 8002da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bfb8      	it	lt
 8002dac:	4613      	movlt	r3, r2
 8002dae:	6033      	str	r3, [r6, #0]
 8002db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002db4:	4607      	mov	r7, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	b10a      	cbz	r2, 8002dbe <_printf_common+0x26>
 8002dba:	3301      	adds	r3, #1
 8002dbc:	6033      	str	r3, [r6, #0]
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	0699      	lsls	r1, r3, #26
 8002dc2:	bf42      	ittt	mi
 8002dc4:	6833      	ldrmi	r3, [r6, #0]
 8002dc6:	3302      	addmi	r3, #2
 8002dc8:	6033      	strmi	r3, [r6, #0]
 8002dca:	6825      	ldr	r5, [r4, #0]
 8002dcc:	f015 0506 	ands.w	r5, r5, #6
 8002dd0:	d106      	bne.n	8002de0 <_printf_common+0x48>
 8002dd2:	f104 0a19 	add.w	sl, r4, #25
 8002dd6:	68e3      	ldr	r3, [r4, #12]
 8002dd8:	6832      	ldr	r2, [r6, #0]
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	42ab      	cmp	r3, r5
 8002dde:	dc26      	bgt.n	8002e2e <_printf_common+0x96>
 8002de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002de4:	1e13      	subs	r3, r2, #0
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	bf18      	it	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	0692      	lsls	r2, r2, #26
 8002dee:	d42b      	bmi.n	8002e48 <_printf_common+0xb0>
 8002df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002df4:	4649      	mov	r1, r9
 8002df6:	4638      	mov	r0, r7
 8002df8:	47c0      	blx	r8
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d01e      	beq.n	8002e3c <_printf_common+0xa4>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	68e5      	ldr	r5, [r4, #12]
 8002e02:	6832      	ldr	r2, [r6, #0]
 8002e04:	f003 0306 	and.w	r3, r3, #6
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	bf08      	it	eq
 8002e0c:	1aad      	subeq	r5, r5, r2
 8002e0e:	68a3      	ldr	r3, [r4, #8]
 8002e10:	6922      	ldr	r2, [r4, #16]
 8002e12:	bf0c      	ite	eq
 8002e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e18:	2500      	movne	r5, #0
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	bfc4      	itt	gt
 8002e1e:	1a9b      	subgt	r3, r3, r2
 8002e20:	18ed      	addgt	r5, r5, r3
 8002e22:	2600      	movs	r6, #0
 8002e24:	341a      	adds	r4, #26
 8002e26:	42b5      	cmp	r5, r6
 8002e28:	d11a      	bne.n	8002e60 <_printf_common+0xc8>
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e008      	b.n	8002e40 <_printf_common+0xa8>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4652      	mov	r2, sl
 8002e32:	4649      	mov	r1, r9
 8002e34:	4638      	mov	r0, r7
 8002e36:	47c0      	blx	r8
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d103      	bne.n	8002e44 <_printf_common+0xac>
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e44:	3501      	adds	r5, #1
 8002e46:	e7c6      	b.n	8002dd6 <_printf_common+0x3e>
 8002e48:	18e1      	adds	r1, r4, r3
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	2030      	movs	r0, #48	; 0x30
 8002e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e52:	4422      	add	r2, r4
 8002e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	e7c7      	b.n	8002df0 <_printf_common+0x58>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4622      	mov	r2, r4
 8002e64:	4649      	mov	r1, r9
 8002e66:	4638      	mov	r0, r7
 8002e68:	47c0      	blx	r8
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d0e6      	beq.n	8002e3c <_printf_common+0xa4>
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7d9      	b.n	8002e26 <_printf_common+0x8e>
	...

08002e74 <_printf_i>:
 8002e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e78:	7e0f      	ldrb	r7, [r1, #24]
 8002e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e7c:	2f78      	cmp	r7, #120	; 0x78
 8002e7e:	4691      	mov	r9, r2
 8002e80:	4680      	mov	r8, r0
 8002e82:	460c      	mov	r4, r1
 8002e84:	469a      	mov	sl, r3
 8002e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e8a:	d807      	bhi.n	8002e9c <_printf_i+0x28>
 8002e8c:	2f62      	cmp	r7, #98	; 0x62
 8002e8e:	d80a      	bhi.n	8002ea6 <_printf_i+0x32>
 8002e90:	2f00      	cmp	r7, #0
 8002e92:	f000 80d8 	beq.w	8003046 <_printf_i+0x1d2>
 8002e96:	2f58      	cmp	r7, #88	; 0x58
 8002e98:	f000 80a3 	beq.w	8002fe2 <_printf_i+0x16e>
 8002e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ea4:	e03a      	b.n	8002f1c <_printf_i+0xa8>
 8002ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eaa:	2b15      	cmp	r3, #21
 8002eac:	d8f6      	bhi.n	8002e9c <_printf_i+0x28>
 8002eae:	a101      	add	r1, pc, #4	; (adr r1, 8002eb4 <_printf_i+0x40>)
 8002eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002eb4:	08002f0d 	.word	0x08002f0d
 8002eb8:	08002f21 	.word	0x08002f21
 8002ebc:	08002e9d 	.word	0x08002e9d
 8002ec0:	08002e9d 	.word	0x08002e9d
 8002ec4:	08002e9d 	.word	0x08002e9d
 8002ec8:	08002e9d 	.word	0x08002e9d
 8002ecc:	08002f21 	.word	0x08002f21
 8002ed0:	08002e9d 	.word	0x08002e9d
 8002ed4:	08002e9d 	.word	0x08002e9d
 8002ed8:	08002e9d 	.word	0x08002e9d
 8002edc:	08002e9d 	.word	0x08002e9d
 8002ee0:	0800302d 	.word	0x0800302d
 8002ee4:	08002f51 	.word	0x08002f51
 8002ee8:	0800300f 	.word	0x0800300f
 8002eec:	08002e9d 	.word	0x08002e9d
 8002ef0:	08002e9d 	.word	0x08002e9d
 8002ef4:	0800304f 	.word	0x0800304f
 8002ef8:	08002e9d 	.word	0x08002e9d
 8002efc:	08002f51 	.word	0x08002f51
 8002f00:	08002e9d 	.word	0x08002e9d
 8002f04:	08002e9d 	.word	0x08002e9d
 8002f08:	08003017 	.word	0x08003017
 8002f0c:	682b      	ldr	r3, [r5, #0]
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	602a      	str	r2, [r5, #0]
 8002f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0a3      	b.n	8003068 <_printf_i+0x1f4>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	6829      	ldr	r1, [r5, #0]
 8002f24:	0606      	lsls	r6, r0, #24
 8002f26:	f101 0304 	add.w	r3, r1, #4
 8002f2a:	d50a      	bpl.n	8002f42 <_printf_i+0xce>
 8002f2c:	680e      	ldr	r6, [r1, #0]
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	2e00      	cmp	r6, #0
 8002f32:	da03      	bge.n	8002f3c <_printf_i+0xc8>
 8002f34:	232d      	movs	r3, #45	; 0x2d
 8002f36:	4276      	negs	r6, r6
 8002f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3c:	485e      	ldr	r0, [pc, #376]	; (80030b8 <_printf_i+0x244>)
 8002f3e:	230a      	movs	r3, #10
 8002f40:	e019      	b.n	8002f76 <_printf_i+0x102>
 8002f42:	680e      	ldr	r6, [r1, #0]
 8002f44:	602b      	str	r3, [r5, #0]
 8002f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f4a:	bf18      	it	ne
 8002f4c:	b236      	sxthne	r6, r6
 8002f4e:	e7ef      	b.n	8002f30 <_printf_i+0xbc>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	1d19      	adds	r1, r3, #4
 8002f56:	6029      	str	r1, [r5, #0]
 8002f58:	0601      	lsls	r1, r0, #24
 8002f5a:	d501      	bpl.n	8002f60 <_printf_i+0xec>
 8002f5c:	681e      	ldr	r6, [r3, #0]
 8002f5e:	e002      	b.n	8002f66 <_printf_i+0xf2>
 8002f60:	0646      	lsls	r6, r0, #25
 8002f62:	d5fb      	bpl.n	8002f5c <_printf_i+0xe8>
 8002f64:	881e      	ldrh	r6, [r3, #0]
 8002f66:	4854      	ldr	r0, [pc, #336]	; (80030b8 <_printf_i+0x244>)
 8002f68:	2f6f      	cmp	r7, #111	; 0x6f
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2308      	moveq	r3, #8
 8002f6e:	230a      	movne	r3, #10
 8002f70:	2100      	movs	r1, #0
 8002f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f76:	6865      	ldr	r5, [r4, #4]
 8002f78:	60a5      	str	r5, [r4, #8]
 8002f7a:	2d00      	cmp	r5, #0
 8002f7c:	bfa2      	ittt	ge
 8002f7e:	6821      	ldrge	r1, [r4, #0]
 8002f80:	f021 0104 	bicge.w	r1, r1, #4
 8002f84:	6021      	strge	r1, [r4, #0]
 8002f86:	b90e      	cbnz	r6, 8002f8c <_printf_i+0x118>
 8002f88:	2d00      	cmp	r5, #0
 8002f8a:	d04d      	beq.n	8003028 <_printf_i+0x1b4>
 8002f8c:	4615      	mov	r5, r2
 8002f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f92:	fb03 6711 	mls	r7, r3, r1, r6
 8002f96:	5dc7      	ldrb	r7, [r0, r7]
 8002f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f9c:	4637      	mov	r7, r6
 8002f9e:	42bb      	cmp	r3, r7
 8002fa0:	460e      	mov	r6, r1
 8002fa2:	d9f4      	bls.n	8002f8e <_printf_i+0x11a>
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d10b      	bne.n	8002fc0 <_printf_i+0x14c>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	07de      	lsls	r6, r3, #31
 8002fac:	d508      	bpl.n	8002fc0 <_printf_i+0x14c>
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	6861      	ldr	r1, [r4, #4]
 8002fb2:	4299      	cmp	r1, r3
 8002fb4:	bfde      	ittt	le
 8002fb6:	2330      	movle	r3, #48	; 0x30
 8002fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fc0:	1b52      	subs	r2, r2, r5
 8002fc2:	6122      	str	r2, [r4, #16]
 8002fc4:	f8cd a000 	str.w	sl, [sp]
 8002fc8:	464b      	mov	r3, r9
 8002fca:	aa03      	add	r2, sp, #12
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4640      	mov	r0, r8
 8002fd0:	f7ff fee2 	bl	8002d98 <_printf_common>
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	d14c      	bne.n	8003072 <_printf_i+0x1fe>
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	b004      	add	sp, #16
 8002fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe2:	4835      	ldr	r0, [pc, #212]	; (80030b8 <_printf_i+0x244>)
 8002fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fe8:	6829      	ldr	r1, [r5, #0]
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ff0:	6029      	str	r1, [r5, #0]
 8002ff2:	061d      	lsls	r5, r3, #24
 8002ff4:	d514      	bpl.n	8003020 <_printf_i+0x1ac>
 8002ff6:	07df      	lsls	r7, r3, #31
 8002ff8:	bf44      	itt	mi
 8002ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8002ffe:	6023      	strmi	r3, [r4, #0]
 8003000:	b91e      	cbnz	r6, 800300a <_printf_i+0x196>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	f023 0320 	bic.w	r3, r3, #32
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	2310      	movs	r3, #16
 800300c:	e7b0      	b.n	8002f70 <_printf_i+0xfc>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	2378      	movs	r3, #120	; 0x78
 8003018:	4828      	ldr	r0, [pc, #160]	; (80030bc <_printf_i+0x248>)
 800301a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800301e:	e7e3      	b.n	8002fe8 <_printf_i+0x174>
 8003020:	0659      	lsls	r1, r3, #25
 8003022:	bf48      	it	mi
 8003024:	b2b6      	uxthmi	r6, r6
 8003026:	e7e6      	b.n	8002ff6 <_printf_i+0x182>
 8003028:	4615      	mov	r5, r2
 800302a:	e7bb      	b.n	8002fa4 <_printf_i+0x130>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	6826      	ldr	r6, [r4, #0]
 8003030:	6961      	ldr	r1, [r4, #20]
 8003032:	1d18      	adds	r0, r3, #4
 8003034:	6028      	str	r0, [r5, #0]
 8003036:	0635      	lsls	r5, r6, #24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	d501      	bpl.n	8003040 <_printf_i+0x1cc>
 800303c:	6019      	str	r1, [r3, #0]
 800303e:	e002      	b.n	8003046 <_printf_i+0x1d2>
 8003040:	0670      	lsls	r0, r6, #25
 8003042:	d5fb      	bpl.n	800303c <_printf_i+0x1c8>
 8003044:	8019      	strh	r1, [r3, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	6123      	str	r3, [r4, #16]
 800304a:	4615      	mov	r5, r2
 800304c:	e7ba      	b.n	8002fc4 <_printf_i+0x150>
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	1d1a      	adds	r2, r3, #4
 8003052:	602a      	str	r2, [r5, #0]
 8003054:	681d      	ldr	r5, [r3, #0]
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	2100      	movs	r1, #0
 800305a:	4628      	mov	r0, r5
 800305c:	f7fd f8c0 	bl	80001e0 <memchr>
 8003060:	b108      	cbz	r0, 8003066 <_printf_i+0x1f2>
 8003062:	1b40      	subs	r0, r0, r5
 8003064:	6060      	str	r0, [r4, #4]
 8003066:	6863      	ldr	r3, [r4, #4]
 8003068:	6123      	str	r3, [r4, #16]
 800306a:	2300      	movs	r3, #0
 800306c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003070:	e7a8      	b.n	8002fc4 <_printf_i+0x150>
 8003072:	6923      	ldr	r3, [r4, #16]
 8003074:	462a      	mov	r2, r5
 8003076:	4649      	mov	r1, r9
 8003078:	4640      	mov	r0, r8
 800307a:	47d0      	blx	sl
 800307c:	3001      	adds	r0, #1
 800307e:	d0ab      	beq.n	8002fd8 <_printf_i+0x164>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	079b      	lsls	r3, r3, #30
 8003084:	d413      	bmi.n	80030ae <_printf_i+0x23a>
 8003086:	68e0      	ldr	r0, [r4, #12]
 8003088:	9b03      	ldr	r3, [sp, #12]
 800308a:	4298      	cmp	r0, r3
 800308c:	bfb8      	it	lt
 800308e:	4618      	movlt	r0, r3
 8003090:	e7a4      	b.n	8002fdc <_printf_i+0x168>
 8003092:	2301      	movs	r3, #1
 8003094:	4632      	mov	r2, r6
 8003096:	4649      	mov	r1, r9
 8003098:	4640      	mov	r0, r8
 800309a:	47d0      	blx	sl
 800309c:	3001      	adds	r0, #1
 800309e:	d09b      	beq.n	8002fd8 <_printf_i+0x164>
 80030a0:	3501      	adds	r5, #1
 80030a2:	68e3      	ldr	r3, [r4, #12]
 80030a4:	9903      	ldr	r1, [sp, #12]
 80030a6:	1a5b      	subs	r3, r3, r1
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	dcf2      	bgt.n	8003092 <_printf_i+0x21e>
 80030ac:	e7eb      	b.n	8003086 <_printf_i+0x212>
 80030ae:	2500      	movs	r5, #0
 80030b0:	f104 0619 	add.w	r6, r4, #25
 80030b4:	e7f5      	b.n	80030a2 <_printf_i+0x22e>
 80030b6:	bf00      	nop
 80030b8:	08003431 	.word	0x08003431
 80030bc:	08003442 	.word	0x08003442

080030c0 <memcpy>:
 80030c0:	440a      	add	r2, r1
 80030c2:	4291      	cmp	r1, r2
 80030c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80030c8:	d100      	bne.n	80030cc <memcpy+0xc>
 80030ca:	4770      	bx	lr
 80030cc:	b510      	push	{r4, lr}
 80030ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030d6:	4291      	cmp	r1, r2
 80030d8:	d1f9      	bne.n	80030ce <memcpy+0xe>
 80030da:	bd10      	pop	{r4, pc}

080030dc <memmove>:
 80030dc:	4288      	cmp	r0, r1
 80030de:	b510      	push	{r4, lr}
 80030e0:	eb01 0402 	add.w	r4, r1, r2
 80030e4:	d902      	bls.n	80030ec <memmove+0x10>
 80030e6:	4284      	cmp	r4, r0
 80030e8:	4623      	mov	r3, r4
 80030ea:	d807      	bhi.n	80030fc <memmove+0x20>
 80030ec:	1e43      	subs	r3, r0, #1
 80030ee:	42a1      	cmp	r1, r4
 80030f0:	d008      	beq.n	8003104 <memmove+0x28>
 80030f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030fa:	e7f8      	b.n	80030ee <memmove+0x12>
 80030fc:	4402      	add	r2, r0
 80030fe:	4601      	mov	r1, r0
 8003100:	428a      	cmp	r2, r1
 8003102:	d100      	bne.n	8003106 <memmove+0x2a>
 8003104:	bd10      	pop	{r4, pc}
 8003106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800310a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800310e:	e7f7      	b.n	8003100 <memmove+0x24>

08003110 <_free_r>:
 8003110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003112:	2900      	cmp	r1, #0
 8003114:	d044      	beq.n	80031a0 <_free_r+0x90>
 8003116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800311a:	9001      	str	r0, [sp, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f1a1 0404 	sub.w	r4, r1, #4
 8003122:	bfb8      	it	lt
 8003124:	18e4      	addlt	r4, r4, r3
 8003126:	f000 f913 	bl	8003350 <__malloc_lock>
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <_free_r+0x94>)
 800312c:	9801      	ldr	r0, [sp, #4]
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	b933      	cbnz	r3, 8003140 <_free_r+0x30>
 8003132:	6063      	str	r3, [r4, #4]
 8003134:	6014      	str	r4, [r2, #0]
 8003136:	b003      	add	sp, #12
 8003138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800313c:	f000 b90e 	b.w	800335c <__malloc_unlock>
 8003140:	42a3      	cmp	r3, r4
 8003142:	d908      	bls.n	8003156 <_free_r+0x46>
 8003144:	6825      	ldr	r5, [r4, #0]
 8003146:	1961      	adds	r1, r4, r5
 8003148:	428b      	cmp	r3, r1
 800314a:	bf01      	itttt	eq
 800314c:	6819      	ldreq	r1, [r3, #0]
 800314e:	685b      	ldreq	r3, [r3, #4]
 8003150:	1949      	addeq	r1, r1, r5
 8003152:	6021      	streq	r1, [r4, #0]
 8003154:	e7ed      	b.n	8003132 <_free_r+0x22>
 8003156:	461a      	mov	r2, r3
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b10b      	cbz	r3, 8003160 <_free_r+0x50>
 800315c:	42a3      	cmp	r3, r4
 800315e:	d9fa      	bls.n	8003156 <_free_r+0x46>
 8003160:	6811      	ldr	r1, [r2, #0]
 8003162:	1855      	adds	r5, r2, r1
 8003164:	42a5      	cmp	r5, r4
 8003166:	d10b      	bne.n	8003180 <_free_r+0x70>
 8003168:	6824      	ldr	r4, [r4, #0]
 800316a:	4421      	add	r1, r4
 800316c:	1854      	adds	r4, r2, r1
 800316e:	42a3      	cmp	r3, r4
 8003170:	6011      	str	r1, [r2, #0]
 8003172:	d1e0      	bne.n	8003136 <_free_r+0x26>
 8003174:	681c      	ldr	r4, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	6053      	str	r3, [r2, #4]
 800317a:	4421      	add	r1, r4
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	e7da      	b.n	8003136 <_free_r+0x26>
 8003180:	d902      	bls.n	8003188 <_free_r+0x78>
 8003182:	230c      	movs	r3, #12
 8003184:	6003      	str	r3, [r0, #0]
 8003186:	e7d6      	b.n	8003136 <_free_r+0x26>
 8003188:	6825      	ldr	r5, [r4, #0]
 800318a:	1961      	adds	r1, r4, r5
 800318c:	428b      	cmp	r3, r1
 800318e:	bf04      	itt	eq
 8003190:	6819      	ldreq	r1, [r3, #0]
 8003192:	685b      	ldreq	r3, [r3, #4]
 8003194:	6063      	str	r3, [r4, #4]
 8003196:	bf04      	itt	eq
 8003198:	1949      	addeq	r1, r1, r5
 800319a:	6021      	streq	r1, [r4, #0]
 800319c:	6054      	str	r4, [r2, #4]
 800319e:	e7ca      	b.n	8003136 <_free_r+0x26>
 80031a0:	b003      	add	sp, #12
 80031a2:	bd30      	pop	{r4, r5, pc}
 80031a4:	2000017c 	.word	0x2000017c

080031a8 <sbrk_aligned>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	4e0e      	ldr	r6, [pc, #56]	; (80031e4 <sbrk_aligned+0x3c>)
 80031ac:	460c      	mov	r4, r1
 80031ae:	6831      	ldr	r1, [r6, #0]
 80031b0:	4605      	mov	r5, r0
 80031b2:	b911      	cbnz	r1, 80031ba <sbrk_aligned+0x12>
 80031b4:	f000 f8bc 	bl	8003330 <_sbrk_r>
 80031b8:	6030      	str	r0, [r6, #0]
 80031ba:	4621      	mov	r1, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 f8b7 	bl	8003330 <_sbrk_r>
 80031c2:	1c43      	adds	r3, r0, #1
 80031c4:	d00a      	beq.n	80031dc <sbrk_aligned+0x34>
 80031c6:	1cc4      	adds	r4, r0, #3
 80031c8:	f024 0403 	bic.w	r4, r4, #3
 80031cc:	42a0      	cmp	r0, r4
 80031ce:	d007      	beq.n	80031e0 <sbrk_aligned+0x38>
 80031d0:	1a21      	subs	r1, r4, r0
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 f8ac 	bl	8003330 <_sbrk_r>
 80031d8:	3001      	adds	r0, #1
 80031da:	d101      	bne.n	80031e0 <sbrk_aligned+0x38>
 80031dc:	f04f 34ff 	mov.w	r4, #4294967295
 80031e0:	4620      	mov	r0, r4
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	20000180 	.word	0x20000180

080031e8 <_malloc_r>:
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ec:	1ccd      	adds	r5, r1, #3
 80031ee:	f025 0503 	bic.w	r5, r5, #3
 80031f2:	3508      	adds	r5, #8
 80031f4:	2d0c      	cmp	r5, #12
 80031f6:	bf38      	it	cc
 80031f8:	250c      	movcc	r5, #12
 80031fa:	2d00      	cmp	r5, #0
 80031fc:	4607      	mov	r7, r0
 80031fe:	db01      	blt.n	8003204 <_malloc_r+0x1c>
 8003200:	42a9      	cmp	r1, r5
 8003202:	d905      	bls.n	8003210 <_malloc_r+0x28>
 8003204:	230c      	movs	r3, #12
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	2600      	movs	r6, #0
 800320a:	4630      	mov	r0, r6
 800320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003210:	4e2e      	ldr	r6, [pc, #184]	; (80032cc <_malloc_r+0xe4>)
 8003212:	f000 f89d 	bl	8003350 <__malloc_lock>
 8003216:	6833      	ldr	r3, [r6, #0]
 8003218:	461c      	mov	r4, r3
 800321a:	bb34      	cbnz	r4, 800326a <_malloc_r+0x82>
 800321c:	4629      	mov	r1, r5
 800321e:	4638      	mov	r0, r7
 8003220:	f7ff ffc2 	bl	80031a8 <sbrk_aligned>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	4604      	mov	r4, r0
 8003228:	d14d      	bne.n	80032c6 <_malloc_r+0xde>
 800322a:	6834      	ldr	r4, [r6, #0]
 800322c:	4626      	mov	r6, r4
 800322e:	2e00      	cmp	r6, #0
 8003230:	d140      	bne.n	80032b4 <_malloc_r+0xcc>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	4631      	mov	r1, r6
 8003236:	4638      	mov	r0, r7
 8003238:	eb04 0803 	add.w	r8, r4, r3
 800323c:	f000 f878 	bl	8003330 <_sbrk_r>
 8003240:	4580      	cmp	r8, r0
 8003242:	d13a      	bne.n	80032ba <_malloc_r+0xd2>
 8003244:	6821      	ldr	r1, [r4, #0]
 8003246:	3503      	adds	r5, #3
 8003248:	1a6d      	subs	r5, r5, r1
 800324a:	f025 0503 	bic.w	r5, r5, #3
 800324e:	3508      	adds	r5, #8
 8003250:	2d0c      	cmp	r5, #12
 8003252:	bf38      	it	cc
 8003254:	250c      	movcc	r5, #12
 8003256:	4629      	mov	r1, r5
 8003258:	4638      	mov	r0, r7
 800325a:	f7ff ffa5 	bl	80031a8 <sbrk_aligned>
 800325e:	3001      	adds	r0, #1
 8003260:	d02b      	beq.n	80032ba <_malloc_r+0xd2>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	442b      	add	r3, r5
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	e00e      	b.n	8003288 <_malloc_r+0xa0>
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	1b52      	subs	r2, r2, r5
 800326e:	d41e      	bmi.n	80032ae <_malloc_r+0xc6>
 8003270:	2a0b      	cmp	r2, #11
 8003272:	d916      	bls.n	80032a2 <_malloc_r+0xba>
 8003274:	1961      	adds	r1, r4, r5
 8003276:	42a3      	cmp	r3, r4
 8003278:	6025      	str	r5, [r4, #0]
 800327a:	bf18      	it	ne
 800327c:	6059      	strne	r1, [r3, #4]
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	bf08      	it	eq
 8003282:	6031      	streq	r1, [r6, #0]
 8003284:	5162      	str	r2, [r4, r5]
 8003286:	604b      	str	r3, [r1, #4]
 8003288:	4638      	mov	r0, r7
 800328a:	f104 060b 	add.w	r6, r4, #11
 800328e:	f000 f865 	bl	800335c <__malloc_unlock>
 8003292:	f026 0607 	bic.w	r6, r6, #7
 8003296:	1d23      	adds	r3, r4, #4
 8003298:	1af2      	subs	r2, r6, r3
 800329a:	d0b6      	beq.n	800320a <_malloc_r+0x22>
 800329c:	1b9b      	subs	r3, r3, r6
 800329e:	50a3      	str	r3, [r4, r2]
 80032a0:	e7b3      	b.n	800320a <_malloc_r+0x22>
 80032a2:	6862      	ldr	r2, [r4, #4]
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	bf0c      	ite	eq
 80032a8:	6032      	streq	r2, [r6, #0]
 80032aa:	605a      	strne	r2, [r3, #4]
 80032ac:	e7ec      	b.n	8003288 <_malloc_r+0xa0>
 80032ae:	4623      	mov	r3, r4
 80032b0:	6864      	ldr	r4, [r4, #4]
 80032b2:	e7b2      	b.n	800321a <_malloc_r+0x32>
 80032b4:	4634      	mov	r4, r6
 80032b6:	6876      	ldr	r6, [r6, #4]
 80032b8:	e7b9      	b.n	800322e <_malloc_r+0x46>
 80032ba:	230c      	movs	r3, #12
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4638      	mov	r0, r7
 80032c0:	f000 f84c 	bl	800335c <__malloc_unlock>
 80032c4:	e7a1      	b.n	800320a <_malloc_r+0x22>
 80032c6:	6025      	str	r5, [r4, #0]
 80032c8:	e7de      	b.n	8003288 <_malloc_r+0xa0>
 80032ca:	bf00      	nop
 80032cc:	2000017c 	.word	0x2000017c

080032d0 <_realloc_r>:
 80032d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d4:	4680      	mov	r8, r0
 80032d6:	4614      	mov	r4, r2
 80032d8:	460e      	mov	r6, r1
 80032da:	b921      	cbnz	r1, 80032e6 <_realloc_r+0x16>
 80032dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032e0:	4611      	mov	r1, r2
 80032e2:	f7ff bf81 	b.w	80031e8 <_malloc_r>
 80032e6:	b92a      	cbnz	r2, 80032f4 <_realloc_r+0x24>
 80032e8:	f7ff ff12 	bl	8003110 <_free_r>
 80032ec:	4625      	mov	r5, r4
 80032ee:	4628      	mov	r0, r5
 80032f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f4:	f000 f838 	bl	8003368 <_malloc_usable_size_r>
 80032f8:	4284      	cmp	r4, r0
 80032fa:	4607      	mov	r7, r0
 80032fc:	d802      	bhi.n	8003304 <_realloc_r+0x34>
 80032fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003302:	d812      	bhi.n	800332a <_realloc_r+0x5a>
 8003304:	4621      	mov	r1, r4
 8003306:	4640      	mov	r0, r8
 8003308:	f7ff ff6e 	bl	80031e8 <_malloc_r>
 800330c:	4605      	mov	r5, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d0ed      	beq.n	80032ee <_realloc_r+0x1e>
 8003312:	42bc      	cmp	r4, r7
 8003314:	4622      	mov	r2, r4
 8003316:	4631      	mov	r1, r6
 8003318:	bf28      	it	cs
 800331a:	463a      	movcs	r2, r7
 800331c:	f7ff fed0 	bl	80030c0 <memcpy>
 8003320:	4631      	mov	r1, r6
 8003322:	4640      	mov	r0, r8
 8003324:	f7ff fef4 	bl	8003110 <_free_r>
 8003328:	e7e1      	b.n	80032ee <_realloc_r+0x1e>
 800332a:	4635      	mov	r5, r6
 800332c:	e7df      	b.n	80032ee <_realloc_r+0x1e>
	...

08003330 <_sbrk_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4d06      	ldr	r5, [pc, #24]	; (800334c <_sbrk_r+0x1c>)
 8003334:	2300      	movs	r3, #0
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	f7fd f992 	bl	8000664 <_sbrk>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_sbrk_r+0x1a>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_sbrk_r+0x1a>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000184 	.word	0x20000184

08003350 <__malloc_lock>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__malloc_lock+0x8>)
 8003352:	f000 b811 	b.w	8003378 <__retarget_lock_acquire_recursive>
 8003356:	bf00      	nop
 8003358:	20000188 	.word	0x20000188

0800335c <__malloc_unlock>:
 800335c:	4801      	ldr	r0, [pc, #4]	; (8003364 <__malloc_unlock+0x8>)
 800335e:	f000 b80c 	b.w	800337a <__retarget_lock_release_recursive>
 8003362:	bf00      	nop
 8003364:	20000188 	.word	0x20000188

08003368 <_malloc_usable_size_r>:
 8003368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336c:	1f18      	subs	r0, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfbc      	itt	lt
 8003372:	580b      	ldrlt	r3, [r1, r0]
 8003374:	18c0      	addlt	r0, r0, r3
 8003376:	4770      	bx	lr

08003378 <__retarget_lock_acquire_recursive>:
 8003378:	4770      	bx	lr

0800337a <__retarget_lock_release_recursive>:
 800337a:	4770      	bx	lr

0800337c <_init>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr

08003388 <_fini>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr
