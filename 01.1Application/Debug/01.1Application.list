
01.1Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  08005190  08005190  00005190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008264  08008264  00008264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008334  08008334  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  08008334  08008334  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008334  08008334  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008334  08008334  00008334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008338  08008338  00008338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800833c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          000000ec  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088a8  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012c2  00000000  00000000  00018948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  00019c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005b0  00000000  00000000  0001a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f365  00000000  00000000  0001a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008781  00000000  00000000  00039b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b95e0  00000000  00000000  000422ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fb8ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bbc  00000000  00000000  000fb900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005190 <__do_global_dtors_aux>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4c05      	ldr	r4, [pc, #20]	; (80051a8 <__do_global_dtors_aux+0x18>)
 8005194:	7823      	ldrb	r3, [r4, #0]
 8005196:	b933      	cbnz	r3, 80051a6 <__do_global_dtors_aux+0x16>
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <__do_global_dtors_aux+0x1c>)
 800519a:	b113      	cbz	r3, 80051a2 <__do_global_dtors_aux+0x12>
 800519c:	4804      	ldr	r0, [pc, #16]	; (80051b0 <__do_global_dtors_aux+0x20>)
 800519e:	f3af 8000 	nop.w
 80051a2:	2301      	movs	r3, #1
 80051a4:	7023      	strb	r3, [r4, #0]
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	20000070 	.word	0x20000070
 80051ac:	00000000 	.word	0x00000000
 80051b0:	0800824c 	.word	0x0800824c

080051b4 <frame_dummy>:
 80051b4:	b508      	push	{r3, lr}
 80051b6:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <frame_dummy+0x10>)
 80051b8:	b11b      	cbz	r3, 80051c2 <frame_dummy+0xe>
 80051ba:	4903      	ldr	r1, [pc, #12]	; (80051c8 <frame_dummy+0x14>)
 80051bc:	4803      	ldr	r0, [pc, #12]	; (80051cc <frame_dummy+0x18>)
 80051be:	f3af 8000 	nop.w
 80051c2:	bd08      	pop	{r3, pc}
 80051c4:	00000000 	.word	0x00000000
 80051c8:	20000074 	.word	0x20000074
 80051cc:	0800824c 	.word	0x0800824c

080051d0 <strlen>:
 80051d0:	4603      	mov	r3, r0
 80051d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	d1fb      	bne.n	80051d2 <strlen+0x2>
 80051da:	1a18      	subs	r0, r3, r0
 80051dc:	3801      	subs	r0, #1
 80051de:	4770      	bx	lr

080051e0 <memchr>:
 80051e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80051e4:	2a10      	cmp	r2, #16
 80051e6:	db2b      	blt.n	8005240 <memchr+0x60>
 80051e8:	f010 0f07 	tst.w	r0, #7
 80051ec:	d008      	beq.n	8005200 <memchr+0x20>
 80051ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80051f2:	3a01      	subs	r2, #1
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d02d      	beq.n	8005254 <memchr+0x74>
 80051f8:	f010 0f07 	tst.w	r0, #7
 80051fc:	b342      	cbz	r2, 8005250 <memchr+0x70>
 80051fe:	d1f6      	bne.n	80051ee <memchr+0xe>
 8005200:	b4f0      	push	{r4, r5, r6, r7}
 8005202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800520a:	f022 0407 	bic.w	r4, r2, #7
 800520e:	f07f 0700 	mvns.w	r7, #0
 8005212:	2300      	movs	r3, #0
 8005214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005218:	3c08      	subs	r4, #8
 800521a:	ea85 0501 	eor.w	r5, r5, r1
 800521e:	ea86 0601 	eor.w	r6, r6, r1
 8005222:	fa85 f547 	uadd8	r5, r5, r7
 8005226:	faa3 f587 	sel	r5, r3, r7
 800522a:	fa86 f647 	uadd8	r6, r6, r7
 800522e:	faa5 f687 	sel	r6, r5, r7
 8005232:	b98e      	cbnz	r6, 8005258 <memchr+0x78>
 8005234:	d1ee      	bne.n	8005214 <memchr+0x34>
 8005236:	bcf0      	pop	{r4, r5, r6, r7}
 8005238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800523c:	f002 0207 	and.w	r2, r2, #7
 8005240:	b132      	cbz	r2, 8005250 <memchr+0x70>
 8005242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005246:	3a01      	subs	r2, #1
 8005248:	ea83 0301 	eor.w	r3, r3, r1
 800524c:	b113      	cbz	r3, 8005254 <memchr+0x74>
 800524e:	d1f8      	bne.n	8005242 <memchr+0x62>
 8005250:	2000      	movs	r0, #0
 8005252:	4770      	bx	lr
 8005254:	3801      	subs	r0, #1
 8005256:	4770      	bx	lr
 8005258:	2d00      	cmp	r5, #0
 800525a:	bf06      	itte	eq
 800525c:	4635      	moveq	r5, r6
 800525e:	3803      	subeq	r0, #3
 8005260:	3807      	subne	r0, #7
 8005262:	f015 0f01 	tst.w	r5, #1
 8005266:	d107      	bne.n	8005278 <memchr+0x98>
 8005268:	3001      	adds	r0, #1
 800526a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800526e:	bf02      	ittt	eq
 8005270:	3001      	addeq	r0, #1
 8005272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005276:	3001      	addeq	r0, #1
 8005278:	bcf0      	pop	{r4, r5, r6, r7}
 800527a:	3801      	subs	r0, #1
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop

08005280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005286:	f000 fa2f 	bl	80056e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800528a:	f000 f849 	bl	8005320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800528e:	f000 f8b9 	bl	8005404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005292:	f000 f887 	bl	80053a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sprintf(txMsg,"Application layer is working...\n");
 8005296:	491c      	ldr	r1, [pc, #112]	; (8005308 <main+0x88>)
 8005298:	481c      	ldr	r0, [pc, #112]	; (800530c <main+0x8c>)
 800529a:	f002 fb69 	bl	8007970 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 800529e:	481b      	ldr	r0, [pc, #108]	; (800530c <main+0x8c>)
 80052a0:	f7ff ff96 	bl	80051d0 <strlen>
 80052a4:	4603      	mov	r3, r0
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	2364      	movs	r3, #100	; 0x64
 80052aa:	4918      	ldr	r1, [pc, #96]	; (800530c <main+0x8c>)
 80052ac:	4818      	ldr	r0, [pc, #96]	; (8005310 <main+0x90>)
 80052ae:	f001 ffb3 	bl	8007218 <HAL_UART_Transmit>

  sprintf(txMsg,"SCB->VTOR value is %#x\n",(int)SCB->VTOR);
 80052b2:	4b18      	ldr	r3, [pc, #96]	; (8005314 <main+0x94>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4917      	ldr	r1, [pc, #92]	; (8005318 <main+0x98>)
 80052ba:	4814      	ldr	r0, [pc, #80]	; (800530c <main+0x8c>)
 80052bc:	f002 fb58 	bl	8007970 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 80052c0:	4812      	ldr	r0, [pc, #72]	; (800530c <main+0x8c>)
 80052c2:	f7ff ff85 	bl	80051d0 <strlen>
 80052c6:	4603      	mov	r3, r0
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	2364      	movs	r3, #100	; 0x64
 80052cc:	490f      	ldr	r1, [pc, #60]	; (800530c <main+0x8c>)
 80052ce:	4810      	ldr	r0, [pc, #64]	; (8005310 <main+0x90>)
 80052d0:	f001 ffa2 	bl	8007218 <HAL_UART_Transmit>

  sprintf(txMsg,"Application while loop is working...\n");
 80052d4:	4911      	ldr	r1, [pc, #68]	; (800531c <main+0x9c>)
 80052d6:	480d      	ldr	r0, [pc, #52]	; (800530c <main+0x8c>)
 80052d8:	f002 fb4a 	bl	8007970 <siprintf>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80052dc:	b662      	cpsie	i
}
 80052de:	bf00      	nop
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t counter = 0xFFFFFF;
 80052e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80052e4:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*)txMsg, strlen(txMsg), 100);
 80052e6:	4809      	ldr	r0, [pc, #36]	; (800530c <main+0x8c>)
 80052e8:	f7ff ff72 	bl	80051d0 <strlen>
 80052ec:	4603      	mov	r3, r0
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	2364      	movs	r3, #100	; 0x64
 80052f2:	4906      	ldr	r1, [pc, #24]	; (800530c <main+0x8c>)
 80052f4:	4806      	ldr	r0, [pc, #24]	; (8005310 <main+0x90>)
 80052f6:	f001 ff8f 	bl	8007218 <HAL_UART_Transmit>
	  while(counter--);
 80052fa:	bf00      	nop
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1fa      	bne.n	80052fc <main+0x7c>
  {
 8005306:	e7eb      	b.n	80052e0 <main+0x60>
 8005308:	08008264 	.word	0x08008264
 800530c:	20000110 	.word	0x20000110
 8005310:	2000008c 	.word	0x2000008c
 8005314:	e000ed00 	.word	0xe000ed00
 8005318:	08008288 	.word	0x08008288
 800531c:	080082a0 	.word	0x080082a0

08005320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b090      	sub	sp, #64	; 0x40
 8005324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005326:	f107 0318 	add.w	r3, r7, #24
 800532a:	2228      	movs	r2, #40	; 0x28
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f002 fb16 	bl	8007960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	605a      	str	r2, [r3, #4]
 800533c:	609a      	str	r2, [r3, #8]
 800533e:	60da      	str	r2, [r3, #12]
 8005340:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005342:	2302      	movs	r3, #2
 8005344:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005346:	2301      	movs	r3, #1
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800534a:	2310      	movs	r3, #16
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800534e:	2302      	movs	r3, #2
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005352:	2300      	movs	r3, #0
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005356:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800535c:	f107 0318 	add.w	r3, r7, #24
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fc97 	bl	8005c94 <HAL_RCC_OscConfig>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800536c:	f000 f8b0 	bl	80054d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005370:	230f      	movs	r3, #15
 8005372:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005374:	2302      	movs	r3, #2
 8005376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800537c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f001 fcc0 	bl	8006d10 <HAL_RCC_ClockConfig>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005396:	f000 f89b 	bl	80054d0 <Error_Handler>
  }
}
 800539a:	bf00      	nop
 800539c:	3740      	adds	r7, #64	; 0x40
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053a8:	4b14      	ldr	r3, [pc, #80]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <MX_USART2_UART_Init+0x5c>)
 80053ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80053b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053b6:	4b11      	ldr	r3, [pc, #68]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053be:	2200      	movs	r2, #0
 80053c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053ca:	220c      	movs	r2, #12
 80053cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053dc:	2200      	movs	r2, #0
 80053de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053e6:	4805      	ldr	r0, [pc, #20]	; (80053fc <MX_USART2_UART_Init+0x58>)
 80053e8:	f001 fec8 	bl	800717c <HAL_UART_Init>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80053f2:	f000 f86d 	bl	80054d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	2000008c 	.word	0x2000008c
 8005400:	40004400 	.word	0x40004400

08005404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540a:	f107 0314 	add.w	r3, r7, #20
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800541a:	4b2b      	ldr	r3, [pc, #172]	; (80054c8 <MX_GPIO_Init+0xc4>)
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4a2a      	ldr	r2, [pc, #168]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005424:	6153      	str	r3, [r2, #20]
 8005426:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005432:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800543c:	6153      	str	r3, [r2, #20]
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800544a:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <MX_GPIO_Init+0xc4>)
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005454:	6153      	str	r3, [r2, #20]
 8005456:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800546c:	6153      	str	r3, [r2, #20]
 800546e:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <MX_GPIO_Init+0xc4>)
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800547a:	2200      	movs	r2, #0
 800547c:	2120      	movs	r1, #32
 800547e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005482:	f000 fbef 	bl	8005c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800548a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800548c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005496:	f107 0314 	add.w	r3, r7, #20
 800549a:	4619      	mov	r1, r3
 800549c:	480b      	ldr	r0, [pc, #44]	; (80054cc <MX_GPIO_Init+0xc8>)
 800549e:	f000 fa6f 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80054a2:	2320      	movs	r3, #32
 80054a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ae:	2300      	movs	r3, #0
 80054b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80054b2:	f107 0314 	add.w	r3, r7, #20
 80054b6:	4619      	mov	r1, r3
 80054b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054bc:	f000 fa60 	bl	8005980 <HAL_GPIO_Init>

}
 80054c0:	bf00      	nop
 80054c2:	3728      	adds	r7, #40	; 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	48000800 	.word	0x48000800

080054d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054d4:	b672      	cpsid	i
}
 80054d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054d8:	e7fe      	b.n	80054d8 <Error_Handler+0x8>
	...

080054dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <HAL_MspInit+0x44>)
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <HAL_MspInit+0x44>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6193      	str	r3, [r2, #24]
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <HAL_MspInit+0x44>)
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_MspInit+0x44>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <HAL_MspInit+0x44>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	61d3      	str	r3, [r2, #28]
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_MspInit+0x44>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005512:	2007      	movs	r0, #7
 8005514:	f000 fa00 	bl	8005918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000

08005524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800552c:	f107 0314 	add.w	r3, r7, #20
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <HAL_UART_MspInit+0x7c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d128      	bne.n	8005598 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005546:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <HAL_UART_MspInit+0x80>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <HAL_UART_MspInit+0x80>)
 800554c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005550:	61d3      	str	r3, [r2, #28]
 8005552:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <HAL_UART_MspInit+0x80>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800555e:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <HAL_UART_MspInit+0x80>)
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4a10      	ldr	r2, [pc, #64]	; (80055a4 <HAL_UART_MspInit+0x80>)
 8005564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005568:	6153      	str	r3, [r2, #20]
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_UART_MspInit+0x80>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005576:	230c      	movs	r3, #12
 8005578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557a:	2302      	movs	r3, #2
 800557c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005582:	2303      	movs	r3, #3
 8005584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005586:	2307      	movs	r3, #7
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558a:	f107 0314 	add.w	r3, r7, #20
 800558e:	4619      	mov	r1, r3
 8005590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005594:	f000 f9f4 	bl	8005980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005598:	bf00      	nop
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40004400 	.word	0x40004400
 80055a4:	40021000 	.word	0x40021000

080055a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <NMI_Handler+0x4>

080055ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055b2:	e7fe      	b.n	80055b2 <HardFault_Handler+0x4>

080055b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055b8:	e7fe      	b.n	80055b8 <MemManage_Handler+0x4>

080055ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055be:	e7fe      	b.n	80055be <BusFault_Handler+0x4>

080055c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055c4:	e7fe      	b.n	80055c4 <UsageFault_Handler+0x4>

080055c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055f4:	f000 f8be 	bl	8005774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}

080055fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <_sbrk+0x5c>)
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <_sbrk+0x60>)
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005610:	4b13      	ldr	r3, [pc, #76]	; (8005660 <_sbrk+0x64>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <_sbrk+0x64>)
 800561a:	4a12      	ldr	r2, [pc, #72]	; (8005664 <_sbrk+0x68>)
 800561c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <_sbrk+0x64>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d207      	bcs.n	800563c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800562c:	f002 f96e 	bl	800790c <__errno>
 8005630:	4603      	mov	r3, r0
 8005632:	220c      	movs	r2, #12
 8005634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295
 800563a:	e009      	b.n	8005650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <_sbrk+0x64>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <_sbrk+0x64>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	4a05      	ldr	r2, [pc, #20]	; (8005660 <_sbrk+0x64>)
 800564c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20003000 	.word	0x20003000
 800565c:	00000400 	.word	0x00000400
 8005660:	20000144 	.word	0x20000144
 8005664:	20000160 	.word	0x20000160

08005668 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800566c:	4b07      	ldr	r3, [pc, #28]	; (800568c <SystemInit+0x24>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	4a06      	ldr	r2, [pc, #24]	; (800568c <SystemInit+0x24>)
 8005674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <SystemInit+0x24>)
 800567e:	4a04      	ldr	r2, [pc, #16]	; (8005690 <SystemInit+0x28>)
 8005680:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005682:	bf00      	nop
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000ed00 	.word	0xe000ed00
 8005690:	08005000 	.word	0x08005000

08005694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005698:	480d      	ldr	r0, [pc, #52]	; (80056d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800569a:	490e      	ldr	r1, [pc, #56]	; (80056d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800569c:	4a0e      	ldr	r2, [pc, #56]	; (80056d8 <LoopForever+0xe>)
  movs r3, #0
 800569e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056a0:	e002      	b.n	80056a8 <LoopCopyDataInit>

080056a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056a6:	3304      	adds	r3, #4

080056a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056ac:	d3f9      	bcc.n	80056a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ae:	4a0b      	ldr	r2, [pc, #44]	; (80056dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80056b0:	4c0b      	ldr	r4, [pc, #44]	; (80056e0 <LoopForever+0x16>)
  movs r3, #0
 80056b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056b4:	e001      	b.n	80056ba <LoopFillZerobss>

080056b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056b8:	3204      	adds	r2, #4

080056ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056bc:	d3fb      	bcc.n	80056b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80056be:	f7ff ffd3 	bl	8005668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056c2:	f002 f929 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056c6:	f7ff fddb 	bl	8005280 <main>

080056ca <LoopForever>:

LoopForever:
    b LoopForever
 80056ca:	e7fe      	b.n	80056ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80056cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80056d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80056d8:	0800833c 	.word	0x0800833c
  ldr r2, =_sbss
 80056dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80056e0:	2000015c 	.word	0x2000015c

080056e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056e4:	e7fe      	b.n	80056e4 <ADC1_2_IRQHandler>
	...

080056e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056ec:	4b08      	ldr	r3, [pc, #32]	; (8005710 <HAL_Init+0x28>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a07      	ldr	r2, [pc, #28]	; (8005710 <HAL_Init+0x28>)
 80056f2:	f043 0310 	orr.w	r3, r3, #16
 80056f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056f8:	2003      	movs	r0, #3
 80056fa:	f000 f90d 	bl	8005918 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056fe:	2000      	movs	r0, #0
 8005700:	f000 f808 	bl	8005714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005704:	f7ff feea 	bl	80054dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40022000 	.word	0x40022000

08005714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800571c:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_InitTick+0x54>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <HAL_InitTick+0x58>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800572a:	fbb3 f3f1 	udiv	r3, r3, r1
 800572e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f917 	bl	8005966 <HAL_SYSTICK_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e00e      	b.n	8005760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b0f      	cmp	r3, #15
 8005746:	d80a      	bhi.n	800575e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005748:	2200      	movs	r2, #0
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	f000 f8ed 	bl	800592e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005754:	4a06      	ldr	r2, [pc, #24]	; (8005770 <HAL_InitTick+0x5c>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e000      	b.n	8005760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000000 	.word	0x20000000
 800576c:	20000008 	.word	0x20000008
 8005770:	20000004 	.word	0x20000004

08005774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_IncTick+0x20>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_IncTick+0x24>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4413      	add	r3, r2
 8005784:	4a04      	ldr	r2, [pc, #16]	; (8005798 <HAL_IncTick+0x24>)
 8005786:	6013      	str	r3, [r2, #0]
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000008 	.word	0x20000008
 8005798:	20000148 	.word	0x20000148

0800579c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return uwTick;  
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <HAL_GetTick+0x14>)
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000148 	.word	0x20000148

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e6:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	60d3      	str	r3, [r2, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005828:	2b00      	cmp	r3, #0
 800582a:	db0a      	blt.n	8005842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	490c      	ldr	r1, [pc, #48]	; (8005864 <__NVIC_SetPriority+0x4c>)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	440b      	add	r3, r1
 800583c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005840:	e00a      	b.n	8005858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4908      	ldr	r1, [pc, #32]	; (8005868 <__NVIC_SetPriority+0x50>)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	3b04      	subs	r3, #4
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	440b      	add	r3, r1
 8005856:	761a      	strb	r2, [r3, #24]
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000e100 	.word	0xe000e100
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f1c3 0307 	rsb	r3, r3, #7
 8005886:	2b04      	cmp	r3, #4
 8005888:	bf28      	it	cs
 800588a:	2304      	movcs	r3, #4
 800588c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3304      	adds	r3, #4
 8005892:	2b06      	cmp	r3, #6
 8005894:	d902      	bls.n	800589c <NVIC_EncodePriority+0x30>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3b03      	subs	r3, #3
 800589a:	e000      	b.n	800589e <NVIC_EncodePriority+0x32>
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a0:	f04f 32ff 	mov.w	r2, #4294967295
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43da      	mvns	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	401a      	ands	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b4:	f04f 31ff 	mov.w	r1, #4294967295
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	43d9      	mvns	r1, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c4:	4313      	orrs	r3, r2
         );
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3724      	adds	r7, #36	; 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058e4:	d301      	bcc.n	80058ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058e6:	2301      	movs	r3, #1
 80058e8:	e00f      	b.n	800590a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <SysTick_Config+0x40>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058f2:	210f      	movs	r1, #15
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	f7ff ff8e 	bl	8005818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <SysTick_Config+0x40>)
 80058fe:	2200      	movs	r2, #0
 8005900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <SysTick_Config+0x40>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	e000e010 	.word	0xe000e010

08005918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ff47 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005940:	f7ff ff5c 	bl	80057fc <__NVIC_GetPriorityGrouping>
 8005944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff ff8e 	bl	800586c <NVIC_EncodePriority>
 8005950:	4602      	mov	r2, r0
 8005952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff ff5d 	bl	8005818 <__NVIC_SetPriority>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff ffb0 	bl	80058d4 <SysTick_Config>
 8005974:	4603      	mov	r3, r0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800598e:	e14e      	b.n	8005c2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2101      	movs	r1, #1
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8140 	beq.w	8005c28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d005      	beq.n	80059c0 <HAL_GPIO_Init+0x40>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d130      	bne.n	8005a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	2203      	movs	r2, #3
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4013      	ands	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f6:	2201      	movs	r2, #1
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0201 	and.w	r2, r3, #1
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d017      	beq.n	8005a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	2203      	movs	r2, #3
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d123      	bne.n	8005ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	08da      	lsrs	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3208      	adds	r2, #8
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	220f      	movs	r2, #15
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	08da      	lsrs	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3208      	adds	r2, #8
 8005aac:	6939      	ldr	r1, [r7, #16]
 8005aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	2203      	movs	r2, #3
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 0203 	and.w	r2, r3, #3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 809a 	beq.w	8005c28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af4:	4b55      	ldr	r3, [pc, #340]	; (8005c4c <HAL_GPIO_Init+0x2cc>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	4a54      	ldr	r2, [pc, #336]	; (8005c4c <HAL_GPIO_Init+0x2cc>)
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	6193      	str	r3, [r2, #24]
 8005b00:	4b52      	ldr	r3, [pc, #328]	; (8005c4c <HAL_GPIO_Init+0x2cc>)
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005b0c:	4a50      	ldr	r2, [pc, #320]	; (8005c50 <HAL_GPIO_Init+0x2d0>)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	089b      	lsrs	r3, r3, #2
 8005b12:	3302      	adds	r3, #2
 8005b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	220f      	movs	r2, #15
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b36:	d013      	beq.n	8005b60 <HAL_GPIO_Init+0x1e0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a46      	ldr	r2, [pc, #280]	; (8005c54 <HAL_GPIO_Init+0x2d4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00d      	beq.n	8005b5c <HAL_GPIO_Init+0x1dc>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a45      	ldr	r2, [pc, #276]	; (8005c58 <HAL_GPIO_Init+0x2d8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <HAL_GPIO_Init+0x1d8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a44      	ldr	r2, [pc, #272]	; (8005c5c <HAL_GPIO_Init+0x2dc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d101      	bne.n	8005b54 <HAL_GPIO_Init+0x1d4>
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <HAL_GPIO_Init+0x1e2>
 8005b54:	2305      	movs	r3, #5
 8005b56:	e004      	b.n	8005b62 <HAL_GPIO_Init+0x1e2>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e002      	b.n	8005b62 <HAL_GPIO_Init+0x1e2>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_GPIO_Init+0x1e2>
 8005b60:	2300      	movs	r3, #0
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	f002 0203 	and.w	r2, r2, #3
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	4093      	lsls	r3, r2
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b72:	4937      	ldr	r1, [pc, #220]	; (8005c50 <HAL_GPIO_Init+0x2d0>)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b80:	4b37      	ldr	r3, [pc, #220]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ba4:	4a2e      	ldr	r2, [pc, #184]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005baa:	4b2d      	ldr	r3, [pc, #180]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005bce:	4a24      	ldr	r2, [pc, #144]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bd4:	4b22      	ldr	r3, [pc, #136]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4013      	ands	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005bf8:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bfe:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	43db      	mvns	r3, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005c22:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <HAL_GPIO_Init+0x2e0>)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f47f aea9 	bne.w	8005990 <HAL_GPIO_Init+0x10>
  }
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	40010000 	.word	0x40010000
 8005c54:	48000400 	.word	0x48000400
 8005c58:	48000800 	.word	0x48000800
 8005c5c:	48000c00 	.word	0x48000c00
 8005c60:	40010400 	.word	0x40010400

08005c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	807b      	strh	r3, [r7, #2]
 8005c70:	4613      	mov	r3, r2
 8005c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c74:	787b      	ldrb	r3, [r7, #1]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c7a:	887a      	ldrh	r2, [r7, #2]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c80:	e002      	b.n	8005c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c82:	887a      	ldrh	r2, [r7, #2]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ca4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f001 b823 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 817d 	beq.w	8005fca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005cd0:	4bbc      	ldr	r3, [pc, #752]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 030c 	and.w	r3, r3, #12
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cdc:	4bb9      	ldr	r3, [pc, #740]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d15c      	bne.n	8005da2 <HAL_RCC_OscConfig+0x10e>
 8005ce8:	4bb6      	ldr	r3, [pc, #728]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf4:	d155      	bne.n	8005da2 <HAL_RCC_OscConfig+0x10e>
 8005cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005d02:	fa93 f3a3 	rbit	r3, r3
 8005d06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0e:	fab3 f383 	clz	r3, r3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d102      	bne.n	8005d28 <HAL_RCC_OscConfig+0x94>
 8005d22:	4ba8      	ldr	r3, [pc, #672]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	e015      	b.n	8005d54 <HAL_RCC_OscConfig+0xc0>
 8005d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005d34:	fa93 f3a3 	rbit	r3, r3
 8005d38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005d44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005d48:	fa93 f3a3 	rbit	r3, r3
 8005d4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005d50:	4b9c      	ldr	r3, [pc, #624]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005d5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005d60:	fa92 f2a2 	rbit	r2, r2
 8005d64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005d68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005d6c:	fab2 f282 	clz	r2, r2
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f042 0220 	orr.w	r2, r2, #32
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	f002 021f 	and.w	r2, r2, #31
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 811f 	beq.w	8005fc8 <HAL_RCC_OscConfig+0x334>
 8005d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 8116 	bne.w	8005fc8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f000 bfaf 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d106      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x12e>
 8005db4:	4b83      	ldr	r3, [pc, #524]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a82      	ldr	r2, [pc, #520]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e036      	b.n	8005e30 <HAL_RCC_OscConfig+0x19c>
 8005dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10c      	bne.n	8005dec <HAL_RCC_OscConfig+0x158>
 8005dd2:	4b7c      	ldr	r3, [pc, #496]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a7b      	ldr	r2, [pc, #492]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b79      	ldr	r3, [pc, #484]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a78      	ldr	r2, [pc, #480]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e021      	b.n	8005e30 <HAL_RCC_OscConfig+0x19c>
 8005dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x184>
 8005dfe:	4b71      	ldr	r3, [pc, #452]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a70      	ldr	r2, [pc, #448]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	4b6e      	ldr	r3, [pc, #440]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6d      	ldr	r2, [pc, #436]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0x19c>
 8005e18:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a69      	ldr	r2, [pc, #420]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4b67      	ldr	r3, [pc, #412]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a66      	ldr	r2, [pc, #408]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e30:	4b64      	ldr	r3, [pc, #400]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	f023 020f 	bic.w	r2, r3, #15
 8005e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	495f      	ldr	r1, [pc, #380]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d059      	beq.n	8005f0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5a:	f7ff fc9f 	bl	800579c <HAL_GetTick>
 8005e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	e00a      	b.n	8005e7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e64:	f7ff fc9a 	bl	800579c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b64      	cmp	r3, #100	; 0x64
 8005e72:	d902      	bls.n	8005e7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	f000 bf43 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
 8005e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005e86:	fa93 f3a3 	rbit	r3, r3
 8005e8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005e8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	fab3 f383 	clz	r3, r3
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d102      	bne.n	8005eac <HAL_RCC_OscConfig+0x218>
 8005ea6:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	e015      	b.n	8005ed8 <HAL_RCC_OscConfig+0x244>
 8005eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005eb8:	fa93 f3a3 	rbit	r3, r3
 8005ebc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005ec8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005ecc:	fa93 f3a3 	rbit	r3, r3
 8005ed0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005edc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005ee0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005ee4:	fa92 f2a2 	rbit	r2, r2
 8005ee8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005eec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005ef0:	fab2 f282 	clz	r2, r2
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	f042 0220 	orr.w	r2, r2, #32
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	f002 021f 	and.w	r2, r2, #31
 8005f00:	2101      	movs	r1, #1
 8005f02:	fa01 f202 	lsl.w	r2, r1, r2
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ab      	beq.n	8005e64 <HAL_RCC_OscConfig+0x1d0>
 8005f0c:	e05d      	b.n	8005fca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0e:	f7ff fc45 	bl	800579c <HAL_GetTick>
 8005f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7ff fc40 	bl	800579c <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b64      	cmp	r3, #100	; 0x64
 8005f26:	d902      	bls.n	8005f2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	f000 bee9 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
 8005f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005f3a:	fa93 f3a3 	rbit	r3, r3
 8005f3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005f42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f46:	fab3 f383 	clz	r3, r3
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d102      	bne.n	8005f60 <HAL_RCC_OscConfig+0x2cc>
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	e015      	b.n	8005f8c <HAL_RCC_OscConfig+0x2f8>
 8005f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f64:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005f6c:	fa93 f3a3 	rbit	r3, r3
 8005f70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005f7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005f80:	fa93 f3a3 	rbit	r3, r3
 8005f84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005f88:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <HAL_RCC_OscConfig+0x330>)
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f90:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005f94:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005f98:	fa92 f2a2 	rbit	r2, r2
 8005f9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005fa0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005fa4:	fab2 f282 	clz	r2, r2
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	f042 0220 	orr.w	r2, r2, #32
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	f002 021f 	and.w	r2, r2, #31
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ab      	bne.n	8005f18 <HAL_RCC_OscConfig+0x284>
 8005fc0:	e003      	b.n	8005fca <HAL_RCC_OscConfig+0x336>
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 817d 	beq.w	80062da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005fe0:	4ba6      	ldr	r3, [pc, #664]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 030c 	and.w	r3, r3, #12
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fec:	4ba3      	ldr	r3, [pc, #652]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d172      	bne.n	80060de <HAL_RCC_OscConfig+0x44a>
 8005ff8:	4ba0      	ldr	r3, [pc, #640]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d16c      	bne.n	80060de <HAL_RCC_OscConfig+0x44a>
 8006004:	2302      	movs	r3, #2
 8006006:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006016:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800601a:	fab3 f383 	clz	r3, r3
 800601e:	b2db      	uxtb	r3, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <HAL_RCC_OscConfig+0x3a0>
 800602e:	4b93      	ldr	r3, [pc, #588]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	e013      	b.n	800605c <HAL_RCC_OscConfig+0x3c8>
 8006034:	2302      	movs	r3, #2
 8006036:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800603e:	fa93 f3a3 	rbit	r3, r3
 8006042:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006046:	2302      	movs	r3, #2
 8006048:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800604c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006050:	fa93 f3a3 	rbit	r3, r3
 8006054:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006058:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	2202      	movs	r2, #2
 800605e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006062:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006066:	fa92 f2a2 	rbit	r2, r2
 800606a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800606e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006072:	fab2 f282 	clz	r2, r2
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	f042 0220 	orr.w	r2, r2, #32
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	f002 021f 	and.w	r2, r2, #31
 8006082:	2101      	movs	r1, #1
 8006084:	fa01 f202 	lsl.w	r2, r1, r2
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCC_OscConfig+0x410>
 800608e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d002      	beq.n	80060a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f000 be2e 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a4:	4b75      	ldr	r3, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	21f8      	movs	r1, #248	; 0xf8
 80060ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80060c2:	fa91 f1a1 	rbit	r1, r1
 80060c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80060ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80060ce:	fab1 f181 	clz	r1, r1
 80060d2:	b2c9      	uxtb	r1, r1
 80060d4:	408b      	lsls	r3, r1
 80060d6:	4969      	ldr	r1, [pc, #420]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060dc:	e0fd      	b.n	80062da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8088 	beq.w	8006200 <HAL_RCC_OscConfig+0x56c>
 80060f0:	2301      	movs	r3, #1
 80060f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80060fa:	fa93 f3a3 	rbit	r3, r3
 80060fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006102:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006106:	fab3 f383 	clz	r3, r3
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	461a      	mov	r2, r3
 8006118:	2301      	movs	r3, #1
 800611a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611c:	f7ff fb3e 	bl	800579c <HAL_GetTick>
 8006120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006124:	e00a      	b.n	800613c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006126:	f7ff fb39 	bl	800579c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d902      	bls.n	800613c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	f000 bde2 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
 800613c:	2302      	movs	r3, #2
 800613e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006142:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006146:	fa93 f3a3 	rbit	r3, r3
 800614a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800614e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006152:	fab3 f383 	clz	r3, r3
 8006156:	b2db      	uxtb	r3, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d102      	bne.n	800616c <HAL_RCC_OscConfig+0x4d8>
 8006166:	4b45      	ldr	r3, [pc, #276]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	e013      	b.n	8006194 <HAL_RCC_OscConfig+0x500>
 800616c:	2302      	movs	r3, #2
 800616e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006172:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006176:	fa93 f3a3 	rbit	r3, r3
 800617a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800617e:	2302      	movs	r3, #2
 8006180:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006184:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006188:	fa93 f3a3 	rbit	r3, r3
 800618c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006190:	4b3a      	ldr	r3, [pc, #232]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	2202      	movs	r2, #2
 8006196:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800619a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800619e:	fa92 f2a2 	rbit	r2, r2
 80061a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80061a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80061aa:	fab2 f282 	clz	r2, r2
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f042 0220 	orr.w	r2, r2, #32
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f002 021f 	and.w	r2, r2, #31
 80061ba:	2101      	movs	r1, #1
 80061bc:	fa01 f202 	lsl.w	r2, r1, r2
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0af      	beq.n	8006126 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c6:	4b2d      	ldr	r3, [pc, #180]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	21f8      	movs	r1, #248	; 0xf8
 80061dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80061e4:	fa91 f1a1 	rbit	r1, r1
 80061e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80061ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80061f0:	fab1 f181 	clz	r1, r1
 80061f4:	b2c9      	uxtb	r1, r1
 80061f6:	408b      	lsls	r3, r1
 80061f8:	4920      	ldr	r1, [pc, #128]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]
 80061fe:	e06c      	b.n	80062da <HAL_RCC_OscConfig+0x646>
 8006200:	2301      	movs	r3, #1
 8006202:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006206:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800620a:	fa93 f3a3 	rbit	r3, r3
 800620e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006212:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006216:	fab3 f383 	clz	r3, r3
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7ff fab6 	bl	800579c <HAL_GetTick>
 8006230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006236:	f7ff fab1 	bl	800579c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d902      	bls.n	800624c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	f000 bd5a 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
 800624c:	2302      	movs	r3, #2
 800624e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006256:	fa93 f3a3 	rbit	r3, r3
 800625a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800625e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d104      	bne.n	8006280 <HAL_RCC_OscConfig+0x5ec>
 8006276:	4b01      	ldr	r3, [pc, #4]	; (800627c <HAL_RCC_OscConfig+0x5e8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	e015      	b.n	80062a8 <HAL_RCC_OscConfig+0x614>
 800627c:	40021000 	.word	0x40021000
 8006280:	2302      	movs	r3, #2
 8006282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006292:	2302      	movs	r3, #2
 8006294:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006298:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800629c:	fa93 f3a3 	rbit	r3, r3
 80062a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062a4:	4bc8      	ldr	r3, [pc, #800]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	2202      	movs	r2, #2
 80062aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80062ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80062b2:	fa92 f2a2 	rbit	r2, r2
 80062b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80062ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80062be:	fab2 f282 	clz	r2, r2
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	f042 0220 	orr.w	r2, r2, #32
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	f002 021f 	and.w	r2, r2, #31
 80062ce:	2101      	movs	r1, #1
 80062d0:	fa01 f202 	lsl.w	r2, r1, r2
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1ad      	bne.n	8006236 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8110 	beq.w	8006510 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d079      	beq.n	80063f4 <HAL_RCC_OscConfig+0x760>
 8006300:	2301      	movs	r3, #1
 8006302:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006316:	fab3 f383 	clz	r3, r3
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	4bab      	ldr	r3, [pc, #684]	; (80065cc <HAL_RCC_OscConfig+0x938>)
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	461a      	mov	r2, r3
 8006326:	2301      	movs	r3, #1
 8006328:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632a:	f7ff fa37 	bl	800579c <HAL_GetTick>
 800632e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006334:	f7ff fa32 	bl	800579c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d902      	bls.n	800634a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	f000 bcdb 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
 800634a:	2302      	movs	r3, #2
 800634c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006350:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006354:	fa93 f3a3 	rbit	r3, r3
 8006358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800635c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006360:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006364:	2202      	movs	r2, #2
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	fa93 f2a3 	rbit	r2, r3
 8006376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006388:	2202      	movs	r2, #2
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	fa93 f2a3 	rbit	r2, r3
 800639a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800639e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a4:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 80063a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063b0:	2102      	movs	r1, #2
 80063b2:	6019      	str	r1, [r3, #0]
 80063b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	fa93 f1a3 	rbit	r1, r3
 80063c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80063ca:	6019      	str	r1, [r3, #0]
  return result;
 80063cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	fab3 f383 	clz	r3, r3
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2101      	movs	r1, #1
 80063e8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0a0      	beq.n	8006334 <HAL_RCC_OscConfig+0x6a0>
 80063f2:	e08d      	b.n	8006510 <HAL_RCC_OscConfig+0x87c>
 80063f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006404:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	fa93 f2a3 	rbit	r2, r3
 800640e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006412:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006416:	601a      	str	r2, [r3, #0]
  return result;
 8006418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006420:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006422:	fab3 f383 	clz	r3, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	4b68      	ldr	r3, [pc, #416]	; (80065cc <HAL_RCC_OscConfig+0x938>)
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	461a      	mov	r2, r3
 8006432:	2300      	movs	r3, #0
 8006434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006436:	f7ff f9b1 	bl	800579c <HAL_GetTick>
 800643a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800643e:	e00a      	b.n	8006456 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006440:	f7ff f9ac 	bl	800579c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d902      	bls.n	8006456 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	f000 bc55 	b.w	8006d00 <HAL_RCC_OscConfig+0x106c>
 8006456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800645a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800645e:	2202      	movs	r2, #2
 8006460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006466:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	fa93 f2a3 	rbit	r2, r3
 8006470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006474:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800647e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006482:	2202      	movs	r2, #2
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800648a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	fa93 f2a3 	rbit	r2, r3
 8006494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a6:	2202      	movs	r2, #2
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	fa93 f2a3 	rbit	r2, r3
 80064b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80064c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 80064c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80064ce:	2102      	movs	r1, #2
 80064d0:	6019      	str	r1, [r3, #0]
 80064d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	fa93 f1a3 	rbit	r1, r3
 80064e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80064e8:	6019      	str	r1, [r3, #0]
  return result;
 80064ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	fab3 f383 	clz	r3, r3
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2101      	movs	r1, #1
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d197      	bne.n	8006440 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006514:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 81a1 	beq.w	8006868 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006526:	2300      	movs	r3, #0
 8006528:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652c:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d116      	bne.n	8006566 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006538:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006542:	61d3      	str	r3, [r2, #28]
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800654c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006550:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800655e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <HAL_RCC_OscConfig+0x93c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11a      	bne.n	80065a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <HAL_RCC_OscConfig+0x93c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <HAL_RCC_OscConfig+0x93c>)
 8006578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800657c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800657e:	f7ff f90d 	bl	800579c <HAL_GetTick>
 8006582:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006586:	e009      	b.n	800659c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006588:	f7ff f908 	bl	800579c <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b64      	cmp	r3, #100	; 0x64
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e3b1      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <HAL_RCC_OscConfig+0x93c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ef      	beq.n	8006588 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d10d      	bne.n	80065d4 <HAL_RCC_OscConfig+0x940>
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	4a02      	ldr	r2, [pc, #8]	; (80065c8 <HAL_RCC_OscConfig+0x934>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6213      	str	r3, [r2, #32]
 80065c4:	e03c      	b.n	8006640 <HAL_RCC_OscConfig+0x9ac>
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	10908120 	.word	0x10908120
 80065d0:	40007000 	.word	0x40007000
 80065d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10c      	bne.n	80065fe <HAL_RCC_OscConfig+0x96a>
 80065e4:	4bc1      	ldr	r3, [pc, #772]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	4ac0      	ldr	r2, [pc, #768]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	6213      	str	r3, [r2, #32]
 80065f0:	4bbe      	ldr	r3, [pc, #760]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	4abd      	ldr	r2, [pc, #756]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 80065f6:	f023 0304 	bic.w	r3, r3, #4
 80065fa:	6213      	str	r3, [r2, #32]
 80065fc:	e020      	b.n	8006640 <HAL_RCC_OscConfig+0x9ac>
 80065fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b05      	cmp	r3, #5
 800660c:	d10c      	bne.n	8006628 <HAL_RCC_OscConfig+0x994>
 800660e:	4bb7      	ldr	r3, [pc, #732]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	4ab6      	ldr	r2, [pc, #728]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006614:	f043 0304 	orr.w	r3, r3, #4
 8006618:	6213      	str	r3, [r2, #32]
 800661a:	4bb4      	ldr	r3, [pc, #720]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	4ab3      	ldr	r2, [pc, #716]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6213      	str	r3, [r2, #32]
 8006626:	e00b      	b.n	8006640 <HAL_RCC_OscConfig+0x9ac>
 8006628:	4bb0      	ldr	r3, [pc, #704]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	4aaf      	ldr	r2, [pc, #700]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	6213      	str	r3, [r2, #32]
 8006634:	4bad      	ldr	r3, [pc, #692]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	4aac      	ldr	r2, [pc, #688]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 800663a:	f023 0304 	bic.w	r3, r3, #4
 800663e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8081 	beq.w	8006754 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006652:	f7ff f8a3 	bl	800579c <HAL_GetTick>
 8006656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665a:	e00b      	b.n	8006674 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665c:	f7ff f89e 	bl	800579c <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f241 3288 	movw	r2, #5000	; 0x1388
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e345      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
 8006674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006678:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800667c:	2202      	movs	r2, #2
 800667e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006684:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	fa93 f2a3 	rbit	r2, r3
 800668e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006692:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800669c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80066a0:	2202      	movs	r2, #2
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	fa93 f2a3 	rbit	r2, r3
 80066b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80066ba:	601a      	str	r2, [r3, #0]
  return result;
 80066bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80066c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c6:	fab3 f383 	clz	r3, r3
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d102      	bne.n	80066e0 <HAL_RCC_OscConfig+0xa4c>
 80066da:	4b84      	ldr	r3, [pc, #528]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	e013      	b.n	8006708 <HAL_RCC_OscConfig+0xa74>
 80066e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80066e8:	2202      	movs	r2, #2
 80066ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	fa93 f2a3 	rbit	r2, r3
 80066fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	4b79      	ldr	r3, [pc, #484]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800670c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006710:	2102      	movs	r1, #2
 8006712:	6011      	str	r1, [r2, #0]
 8006714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006718:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	fa92 f1a2 	rbit	r1, r2
 8006722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006726:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800672a:	6011      	str	r1, [r2, #0]
  return result;
 800672c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006730:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	fab2 f282 	clz	r2, r2
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	f002 021f 	and.w	r2, r2, #31
 8006746:	2101      	movs	r1, #1
 8006748:	fa01 f202 	lsl.w	r2, r1, r2
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d084      	beq.n	800665c <HAL_RCC_OscConfig+0x9c8>
 8006752:	e07f      	b.n	8006854 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006754:	f7ff f822 	bl	800579c <HAL_GetTick>
 8006758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800675c:	e00b      	b.n	8006776 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800675e:	f7ff f81d 	bl	800579c <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f241 3288 	movw	r2, #5000	; 0x1388
 800676e:	4293      	cmp	r3, r2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e2c4      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
 8006776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800677a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800677e:	2202      	movs	r2, #2
 8006780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006786:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	fa93 f2a3 	rbit	r2, r3
 8006790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006794:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800679e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80067a2:	2202      	movs	r2, #2
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	fa93 f2a3 	rbit	r2, r3
 80067b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80067bc:	601a      	str	r2, [r3, #0]
  return result;
 80067be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80067c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067c8:	fab3 f383 	clz	r3, r3
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f043 0302 	orr.w	r3, r3, #2
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d102      	bne.n	80067e2 <HAL_RCC_OscConfig+0xb4e>
 80067dc:	4b43      	ldr	r3, [pc, #268]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	e013      	b.n	800680a <HAL_RCC_OscConfig+0xb76>
 80067e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80067ea:	2202      	movs	r2, #2
 80067ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	fa93 f2a3 	rbit	r2, r3
 80067fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006800:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800680e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006812:	2102      	movs	r1, #2
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800681a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	fa92 f1a2 	rbit	r1, r2
 8006824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006828:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800682c:	6011      	str	r1, [r2, #0]
  return result;
 800682e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006832:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	fab2 f282 	clz	r2, r2
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	f002 021f 	and.w	r2, r2, #31
 8006848:	2101      	movs	r1, #1
 800684a:	fa01 f202 	lsl.w	r2, r1, r2
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d184      	bne.n	800675e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006854:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006858:	2b01      	cmp	r3, #1
 800685a:	d105      	bne.n	8006868 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685c:	4b23      	ldr	r3, [pc, #140]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	4a22      	ldr	r2, [pc, #136]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 8006862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006866:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800686c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8242 	beq.w	8006cfe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800687a:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <HAL_RCC_OscConfig+0xc58>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f003 030c 	and.w	r3, r3, #12
 8006882:	2b08      	cmp	r3, #8
 8006884:	f000 8213 	beq.w	8006cae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800688c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b02      	cmp	r3, #2
 8006896:	f040 8162 	bne.w	8006b5e <HAL_RCC_OscConfig+0xeca>
 800689a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800689e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80068a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	fa93 f2a3 	rbit	r2, r3
 80068b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80068be:	601a      	str	r2, [r3, #0]
  return result;
 80068c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80068c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ca:	fab3 f383 	clz	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80068d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	461a      	mov	r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fe ff5c 	bl	800579c <HAL_GetTick>
 80068e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e8:	e00c      	b.n	8006904 <HAL_RCC_OscConfig+0xc70>
 80068ea:	bf00      	nop
 80068ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fe ff54 	bl	800579c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e1fd      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
 8006904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006908:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800690c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006916:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	fa93 f2a3 	rbit	r2, r3
 8006920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006924:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006928:	601a      	str	r2, [r3, #0]
  return result;
 800692a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800692e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006932:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006934:	fab3 f383 	clz	r3, r3
 8006938:	b2db      	uxtb	r3, r3
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d102      	bne.n	800694e <HAL_RCC_OscConfig+0xcba>
 8006948:	4bb0      	ldr	r3, [pc, #704]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	e027      	b.n	800699e <HAL_RCC_OscConfig+0xd0a>
 800694e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006952:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800695a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006960:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	fa93 f2a3 	rbit	r2, r3
 800696a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800696e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006978:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800697c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006986:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	fa93 f2a3 	rbit	r2, r3
 8006990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006994:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	4b9c      	ldr	r3, [pc, #624]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80069a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80069aa:	6011      	str	r1, [r2, #0]
 80069ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	fa92 f1a2 	rbit	r1, r2
 80069ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80069c2:	6011      	str	r1, [r2, #0]
  return result;
 80069c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	fab2 f282 	clz	r2, r2
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	f042 0220 	orr.w	r2, r2, #32
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	f002 021f 	and.w	r2, r2, #31
 80069de:	2101      	movs	r1, #1
 80069e0:	fa01 f202 	lsl.w	r2, r1, r2
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d182      	bne.n	80068f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ea:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	497f      	ldr	r1, [pc, #508]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	604b      	str	r3, [r1, #4]
 8006a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006a1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	fa93 f2a3 	rbit	r2, r3
 8006a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006a36:	601a      	str	r2, [r3, #0]
  return result;
 8006a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006a40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a42:	fab3 f383 	clz	r3, r3
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	461a      	mov	r2, r3
 8006a54:	2301      	movs	r3, #1
 8006a56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a58:	f7fe fea0 	bl	800579c <HAL_GetTick>
 8006a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a60:	e009      	b.n	8006a76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a62:	f7fe fe9b 	bl	800579c <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e144      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
 8006a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	fa93 f2a3 	rbit	r2, r3
 8006a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a9a:	601a      	str	r2, [r3, #0]
  return result;
 8006a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aa0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006aa4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006aa6:	fab3 f383 	clz	r3, r3
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCC_OscConfig+0xe2c>
 8006aba:	4b54      	ldr	r3, [pc, #336]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	e027      	b.n	8006b10 <HAL_RCC_OscConfig+0xe7c>
 8006ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ac4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ad2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	fa93 f2a3 	rbit	r2, r3
 8006adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ae0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006af8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	fa93 f2a3 	rbit	r2, r3
 8006b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	4b3f      	ldr	r3, [pc, #252]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006b18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b1c:	6011      	str	r1, [r2, #0]
 8006b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	fa92 f1a2 	rbit	r1, r2
 8006b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006b34:	6011      	str	r1, [r2, #0]
  return result;
 8006b36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	fab2 f282 	clz	r2, r2
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	f042 0220 	orr.w	r2, r2, #32
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	f002 021f 	and.w	r2, r2, #31
 8006b50:	2101      	movs	r1, #1
 8006b52:	fa01 f202 	lsl.w	r2, r1, r2
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d082      	beq.n	8006a62 <HAL_RCC_OscConfig+0xdce>
 8006b5c:	e0cf      	b.n	8006cfe <HAL_RCC_OscConfig+0x106a>
 8006b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	fa93 f2a3 	rbit	r2, r3
 8006b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b82:	601a      	str	r2, [r3, #0]
  return result;
 8006b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8e:	fab3 f383 	clz	r3, r3
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fe fdfa 	bl	800579c <HAL_GetTick>
 8006ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bac:	e009      	b.n	8006bc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bae:	f7fe fdf5 	bl	800579c <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e09e      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
 8006bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	fa93 f2a3 	rbit	r2, r3
 8006bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006be6:	601a      	str	r2, [r3, #0]
  return result;
 8006be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bf2:	fab3 f383 	clz	r3, r3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d104      	bne.n	8006c10 <HAL_RCC_OscConfig+0xf7c>
 8006c06:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <HAL_RCC_OscConfig+0xf78>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	e029      	b.n	8006c60 <HAL_RCC_OscConfig+0xfcc>
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	fa93 f2a3 	rbit	r2, r3
 8006c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	fa93 f2a3 	rbit	r2, r3
 8006c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <HAL_RCC_OscConfig+0x1078>)
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006c68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c6c:	6011      	str	r1, [r2, #0]
 8006c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	fa92 f1a2 	rbit	r1, r2
 8006c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006c84:	6011      	str	r1, [r2, #0]
  return result;
 8006c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	fab2 f282 	clz	r2, r2
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	f042 0220 	orr.w	r2, r2, #32
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	f002 021f 	and.w	r2, r2, #31
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d180      	bne.n	8006bae <HAL_RCC_OscConfig+0xf1a>
 8006cac:	e027      	b.n	8006cfe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e01e      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cc2:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <HAL_RCC_OscConfig+0x1078>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006cce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d10b      	bne.n	8006cfa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006ce2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d001      	beq.n	8006cfe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000

08006d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b09e      	sub	sp, #120	; 0x78
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e162      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d28:	4b90      	ldr	r3, [pc, #576]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d910      	bls.n	8006d58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d36:	4b8d      	ldr	r3, [pc, #564]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f023 0207 	bic.w	r2, r3, #7
 8006d3e:	498b      	ldr	r1, [pc, #556]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d46:	4b89      	ldr	r3, [pc, #548]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e14a      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b82      	ldr	r3, [pc, #520]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	497f      	ldr	r1, [pc, #508]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80dc 	beq.w	8006f3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d13c      	bne.n	8006e06 <HAL_RCC_ClockConfig+0xf6>
 8006d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d94:	fa93 f3a3 	rbit	r3, r3
 8006d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9c:	fab3 f383 	clz	r3, r3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d102      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xa6>
 8006db0:	4b6f      	ldr	r3, [pc, #444]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	e00f      	b.n	8006dd6 <HAL_RCC_ClockConfig+0xc6>
 8006db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dbe:	fa93 f3a3 	rbit	r3, r3
 8006dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8006dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8006dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dcc:	fa93 f3a3 	rbit	r3, r3
 8006dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd2:	4b67      	ldr	r3, [pc, #412]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dda:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dde:	fa92 f2a2 	rbit	r2, r2
 8006de2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006de6:	fab2 f282 	clz	r2, r2
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	f042 0220 	orr.w	r2, r2, #32
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	f002 021f 	and.w	r2, r2, #31
 8006df6:	2101      	movs	r1, #1
 8006df8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d17b      	bne.n	8006efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0f3      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d13c      	bne.n	8006e88 <HAL_RCC_ClockConfig+0x178>
 8006e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e16:	fa93 f3a3 	rbit	r3, r3
 8006e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1e:	fab3 f383 	clz	r3, r3
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f043 0301 	orr.w	r3, r3, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d102      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x128>
 8006e32:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	e00f      	b.n	8006e58 <HAL_RCC_ClockConfig+0x148>
 8006e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e40:	fa93 f3a3 	rbit	r3, r3
 8006e44:	647b      	str	r3, [r7, #68]	; 0x44
 8006e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4e:	fa93 f3a3 	rbit	r3, r3
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e54:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e60:	fa92 f2a2 	rbit	r2, r2
 8006e64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e68:	fab2 f282 	clz	r2, r2
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	f042 0220 	orr.w	r2, r2, #32
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	f002 021f 	and.w	r2, r2, #31
 8006e78:	2101      	movs	r1, #1
 8006e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d13a      	bne.n	8006efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0b2      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	fa93 f3a3 	rbit	r3, r3
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e96:	fab3 f383 	clz	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f043 0301 	orr.w	r3, r3, #1
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d102      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x1a0>
 8006eaa:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	e00d      	b.n	8006ecc <HAL_RCC_ClockConfig+0x1bc>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	fa93 f3a3 	rbit	r3, r3
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	fa93 f3a3 	rbit	r3, r3
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	2202      	movs	r2, #2
 8006ece:	61ba      	str	r2, [r7, #24]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	fa92 f2a2 	rbit	r2, r2
 8006ed6:	617a      	str	r2, [r7, #20]
  return result;
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	fab2 f282 	clz	r2, r2
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	f042 0220 	orr.w	r2, r2, #32
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	f002 021f 	and.w	r2, r2, #31
 8006eea:	2101      	movs	r1, #1
 8006eec:	fa01 f202 	lsl.w	r2, r1, r2
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e079      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f023 0203 	bic.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	491a      	ldr	r1, [pc, #104]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f0c:	f7fe fc46 	bl	800579c <HAL_GetTick>
 8006f10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f12:	e00a      	b.n	8006f2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f14:	f7fe fc42 	bl	800579c <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e061      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f2a:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <HAL_RCC_ClockConfig+0x260>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 020c 	and.w	r2, r3, #12
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d1eb      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f3c:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d214      	bcs.n	8006f74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4a:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 0207 	bic.w	r2, r3, #7
 8006f52:	4906      	ldr	r1, [pc, #24]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5a:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <HAL_RCC_ClockConfig+0x25c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d005      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e040      	b.n	8006fee <HAL_RCC_ClockConfig+0x2de>
 8006f6c:	40022000 	.word	0x40022000
 8006f70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f80:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	491a      	ldr	r1, [pc, #104]	; (8006ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4912      	ldr	r1, [pc, #72]	; (8006ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006fb2:	f000 f829 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc0:	22f0      	movs	r2, #240	; 0xf0
 8006fc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	fa92 f2a2 	rbit	r2, r2
 8006fca:	60fa      	str	r2, [r7, #12]
  return result;
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	fab2 f282 	clz	r2, r2
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	40d3      	lsrs	r3, r2
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <HAL_RCC_ClockConfig+0x2ec>)
 8006fd8:	5cd3      	ldrb	r3, [r2, r3]
 8006fda:	fa21 f303 	lsr.w	r3, r1, r3
 8006fde:	4a08      	ldr	r2, [pc, #32]	; (8007000 <HAL_RCC_ClockConfig+0x2f0>)
 8006fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <HAL_RCC_ClockConfig+0x2f4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fb94 	bl	8005714 <HAL_InitTick>
  
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3778      	adds	r7, #120	; 0x78
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	080082c8 	.word	0x080082c8
 8007000:	20000000 	.word	0x20000000
 8007004:	20000004 	.word	0x20000004

08007008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007008:	b480      	push	{r7}
 800700a:	b08b      	sub	sp, #44	; 0x2c
 800700c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	2300      	movs	r3, #0
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	2300      	movs	r3, #0
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f003 030c 	and.w	r3, r3, #12
 800702e:	2b04      	cmp	r3, #4
 8007030:	d002      	beq.n	8007038 <HAL_RCC_GetSysClockFreq+0x30>
 8007032:	2b08      	cmp	r3, #8
 8007034:	d003      	beq.n	800703e <HAL_RCC_GetSysClockFreq+0x36>
 8007036:	e03c      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007038:	4b24      	ldr	r3, [pc, #144]	; (80070cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800703a:	623b      	str	r3, [r7, #32]
      break;
 800703c:	e03c      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007044:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007048:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	fa92 f2a2 	rbit	r2, r2
 8007050:	607a      	str	r2, [r7, #4]
  return result;
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	fab2 f282 	clz	r2, r2
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	40d3      	lsrs	r3, r2
 800705c:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800705e:	5cd3      	ldrb	r3, [r2, r3]
 8007060:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007062:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	220f      	movs	r2, #15
 800706c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	fa92 f2a2 	rbit	r2, r2
 8007074:	60fa      	str	r2, [r7, #12]
  return result;
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	fab2 f282 	clz	r2, r2
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	40d3      	lsrs	r3, r2
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007082:	5cd3      	ldrb	r3, [r2, r3]
 8007084:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007090:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	fbb2 f2f3 	udiv	r2, r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
 80070a0:	e004      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	623b      	str	r3, [r7, #32]
      break;
 80070b0:	e002      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80070b4:	623b      	str	r3, [r7, #32]
      break;
 80070b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b8:	6a3b      	ldr	r3, [r7, #32]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	372c      	adds	r7, #44	; 0x2c
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40021000 	.word	0x40021000
 80070cc:	007a1200 	.word	0x007a1200
 80070d0:	080082e0 	.word	0x080082e0
 80070d4:	080082f0 	.word	0x080082f0
 80070d8:	003d0900 	.word	0x003d0900

080070dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000000 	.word	0x20000000

080070f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80070fa:	f7ff ffef 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 80070fe:	4601      	mov	r1, r0
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007108:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800710c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	fa92 f2a2 	rbit	r2, r2
 8007114:	603a      	str	r2, [r7, #0]
  return result;
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	fab2 f282 	clz	r2, r2
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	40d3      	lsrs	r3, r2
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40021000 	.word	0x40021000
 8007134:	080082d8 	.word	0x080082d8

08007138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800713e:	f7ff ffcd 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 8007142:	4601      	mov	r1, r0
 8007144:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800714c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007150:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	fa92 f2a2 	rbit	r2, r2
 8007158:	603a      	str	r2, [r7, #0]
  return result;
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	fab2 f282 	clz	r2, r2
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	40d3      	lsrs	r3, r2
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007166:	5cd3      	ldrb	r3, [r2, r3]
 8007168:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40021000 	.word	0x40021000
 8007178:	080082d8 	.word	0x080082d8

0800717c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e040      	b.n	8007210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe f9c0 	bl	8005524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	; 0x24
 80071a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f8c0 	bl	8007340 <UART_SetConfig>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e022      	b.n	8007210 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f9ea 	bl	80075ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa71 	bl	80076f0 <UART_CheckIdleState>
 800720e:	4603      	mov	r3, r0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800722c:	2b20      	cmp	r3, #32
 800722e:	f040 8082 	bne.w	8007336 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_UART_Transmit+0x26>
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e07a      	b.n	8007338 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_UART_Transmit+0x38>
 800724c:	2302      	movs	r3, #2
 800724e:	e073      	b.n	8007338 <HAL_UART_Transmit+0x120>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2221      	movs	r2, #33	; 0x21
 8007264:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007266:	f7fe fa99 	bl	800579c <HAL_GetTick>
 800726a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007284:	d108      	bne.n	8007298 <HAL_UART_Transmit+0x80>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e003      	b.n	80072a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800729c:	2300      	movs	r3, #0
 800729e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80072a8:	e02d      	b.n	8007306 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2200      	movs	r2, #0
 80072b2:	2180      	movs	r1, #128	; 0x80
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa64 	bl	8007782 <UART_WaitOnFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e039      	b.n	8007338 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	881a      	ldrh	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d6:	b292      	uxth	r2, r2
 80072d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	3302      	adds	r3, #2
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	e008      	b.n	80072f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	781a      	ldrb	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	b292      	uxth	r2, r2
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1cb      	bne.n	80072aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2200      	movs	r2, #0
 800731a:	2140      	movs	r1, #64	; 0x40
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fa30 	bl	8007782 <UART_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e005      	b.n	8007338 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	e000      	b.n	8007338 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007336:	2302      	movs	r3, #2
  }
}
 8007338:	4618      	mov	r0, r3
 800733a:	3720      	adds	r7, #32
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b8a      	ldr	r3, [pc, #552]	; (8007594 <UART_SetConfig+0x254>)
 800736c:	4013      	ands	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	6979      	ldr	r1, [r7, #20]
 8007374:	430b      	orrs	r3, r1
 8007376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a78      	ldr	r2, [pc, #480]	; (8007598 <UART_SetConfig+0x258>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d120      	bne.n	80073fe <UART_SetConfig+0xbe>
 80073bc:	4b77      	ldr	r3, [pc, #476]	; (800759c <UART_SetConfig+0x25c>)
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d817      	bhi.n	80073f8 <UART_SetConfig+0xb8>
 80073c8:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <UART_SetConfig+0x90>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	080073e1 	.word	0x080073e1
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	080073f3 	.word	0x080073f3
 80073dc:	080073e7 	.word	0x080073e7
 80073e0:	2300      	movs	r3, #0
 80073e2:	77fb      	strb	r3, [r7, #31]
 80073e4:	e01d      	b.n	8007422 <UART_SetConfig+0xe2>
 80073e6:	2302      	movs	r3, #2
 80073e8:	77fb      	strb	r3, [r7, #31]
 80073ea:	e01a      	b.n	8007422 <UART_SetConfig+0xe2>
 80073ec:	2304      	movs	r3, #4
 80073ee:	77fb      	strb	r3, [r7, #31]
 80073f0:	e017      	b.n	8007422 <UART_SetConfig+0xe2>
 80073f2:	2308      	movs	r3, #8
 80073f4:	77fb      	strb	r3, [r7, #31]
 80073f6:	e014      	b.n	8007422 <UART_SetConfig+0xe2>
 80073f8:	2310      	movs	r3, #16
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e011      	b.n	8007422 <UART_SetConfig+0xe2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a67      	ldr	r2, [pc, #412]	; (80075a0 <UART_SetConfig+0x260>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d102      	bne.n	800740e <UART_SetConfig+0xce>
 8007408:	2300      	movs	r3, #0
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e009      	b.n	8007422 <UART_SetConfig+0xe2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a64      	ldr	r2, [pc, #400]	; (80075a4 <UART_SetConfig+0x264>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d102      	bne.n	800741e <UART_SetConfig+0xde>
 8007418:	2300      	movs	r3, #0
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e001      	b.n	8007422 <UART_SetConfig+0xe2>
 800741e:	2310      	movs	r3, #16
 8007420:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742a:	d15b      	bne.n	80074e4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800742c:	7ffb      	ldrb	r3, [r7, #31]
 800742e:	2b08      	cmp	r3, #8
 8007430:	d827      	bhi.n	8007482 <UART_SetConfig+0x142>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <UART_SetConfig+0xf8>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	0800745d 	.word	0x0800745d
 800743c:	08007465 	.word	0x08007465
 8007440:	0800746d 	.word	0x0800746d
 8007444:	08007483 	.word	0x08007483
 8007448:	08007473 	.word	0x08007473
 800744c:	08007483 	.word	0x08007483
 8007450:	08007483 	.word	0x08007483
 8007454:	08007483 	.word	0x08007483
 8007458:	0800747b 	.word	0x0800747b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800745c:	f7ff fe4a 	bl	80070f4 <HAL_RCC_GetPCLK1Freq>
 8007460:	61b8      	str	r0, [r7, #24]
        break;
 8007462:	e013      	b.n	800748c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007464:	f7ff fe68 	bl	8007138 <HAL_RCC_GetPCLK2Freq>
 8007468:	61b8      	str	r0, [r7, #24]
        break;
 800746a:	e00f      	b.n	800748c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800746c:	4b4e      	ldr	r3, [pc, #312]	; (80075a8 <UART_SetConfig+0x268>)
 800746e:	61bb      	str	r3, [r7, #24]
        break;
 8007470:	e00c      	b.n	800748c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007472:	f7ff fdc9 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 8007476:	61b8      	str	r0, [r7, #24]
        break;
 8007478:	e008      	b.n	800748c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	61bb      	str	r3, [r7, #24]
        break;
 8007480:	e004      	b.n	800748c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	77bb      	strb	r3, [r7, #30]
        break;
 800748a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d074      	beq.n	800757c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	441a      	add	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b0f      	cmp	r3, #15
 80074ae:	d916      	bls.n	80074de <UART_SetConfig+0x19e>
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b6:	d212      	bcs.n	80074de <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f023 030f 	bic.w	r3, r3, #15
 80074c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	89fb      	ldrh	r3, [r7, #14]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	89fa      	ldrh	r2, [r7, #14]
 80074da:	60da      	str	r2, [r3, #12]
 80074dc:	e04e      	b.n	800757c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	77bb      	strb	r3, [r7, #30]
 80074e2:	e04b      	b.n	800757c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074e4:	7ffb      	ldrb	r3, [r7, #31]
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d827      	bhi.n	800753a <UART_SetConfig+0x1fa>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <UART_SetConfig+0x1b0>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007515 	.word	0x08007515
 80074f4:	0800751d 	.word	0x0800751d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	0800753b 	.word	0x0800753b
 8007500:	0800752b 	.word	0x0800752b
 8007504:	0800753b 	.word	0x0800753b
 8007508:	0800753b 	.word	0x0800753b
 800750c:	0800753b 	.word	0x0800753b
 8007510:	08007533 	.word	0x08007533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007514:	f7ff fdee 	bl	80070f4 <HAL_RCC_GetPCLK1Freq>
 8007518:	61b8      	str	r0, [r7, #24]
        break;
 800751a:	e013      	b.n	8007544 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800751c:	f7ff fe0c 	bl	8007138 <HAL_RCC_GetPCLK2Freq>
 8007520:	61b8      	str	r0, [r7, #24]
        break;
 8007522:	e00f      	b.n	8007544 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007524:	4b20      	ldr	r3, [pc, #128]	; (80075a8 <UART_SetConfig+0x268>)
 8007526:	61bb      	str	r3, [r7, #24]
        break;
 8007528:	e00c      	b.n	8007544 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752a:	f7ff fd6d 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 800752e:	61b8      	str	r0, [r7, #24]
        break;
 8007530:	e008      	b.n	8007544 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007536:	61bb      	str	r3, [r7, #24]
        break;
 8007538:	e004      	b.n	8007544 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	77bb      	strb	r3, [r7, #30]
        break;
 8007542:	bf00      	nop
    }

    if (pclk != 0U)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d018      	beq.n	800757c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	085a      	lsrs	r2, r3, #1
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	441a      	add	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	b29b      	uxth	r3, r3
 800755e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b0f      	cmp	r3, #15
 8007564:	d908      	bls.n	8007578 <UART_SetConfig+0x238>
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756c:	d204      	bcs.n	8007578 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	e001      	b.n	800757c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007588:	7fbb      	ldrb	r3, [r7, #30]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	efff69f3 	.word	0xefff69f3
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	40004400 	.word	0x40004400
 80075a4:	40004800 	.word	0x40004800
 80075a8:	007a1200 	.word	0x007a1200

080075ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01a      	beq.n	80076c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076aa:	d10a      	bne.n	80076c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	605a      	str	r2, [r3, #4]
  }
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007700:	f7fe f84c 	bl	800579c <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b08      	cmp	r3, #8
 8007712:	d10e      	bne.n	8007732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f82d 	bl	8007782 <UART_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e023      	b.n	800777a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d10e      	bne.n	800775e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f817 	bl	8007782 <UART_WaitOnFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e00d      	b.n	800777a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b09c      	sub	sp, #112	; 0x70
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007792:	e0a5      	b.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	f000 80a1 	beq.w	80078e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779e:	f7fd fffd 	bl	800579c <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d302      	bcc.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80077ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d13e      	bne.n	8007832 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c8:	667b      	str	r3, [r7, #100]	; 0x64
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e6      	bne.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	663b      	str	r3, [r7, #96]	; 0x60
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007806:	64ba      	str	r2, [r7, #72]	; 0x48
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800780c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2220      	movs	r2, #32
 800781e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e067      	b.n	8007902 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d04f      	beq.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800784a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800784e:	d147      	bne.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007858:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800786e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800787e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e6      	bne.n	800785a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	613b      	str	r3, [r7, #16]
   return(result);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078ac:	623a      	str	r2, [r7, #32]
 80078ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	69f9      	ldr	r1, [r7, #28]
 80078b2:	6a3a      	ldr	r2, [r7, #32]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2220      	movs	r2, #32
 80078c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2220      	movs	r2, #32
 80078ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e010      	b.n	8007902 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69da      	ldr	r2, [r3, #28]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4013      	ands	r3, r2
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	f43f af4a 	beq.w	8007794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3770      	adds	r7, #112	; 0x70
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	2000000c 	.word	0x2000000c

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	; (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	; (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	; (800795c <__libc_init_array+0x44>)
 800792c:	f000 fc8e 	bl	800824c <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	08008334 	.word	0x08008334
 8007954:	08008334 	.word	0x08008334
 8007958:	08008334 	.word	0x08008334
 800795c:	08008338 	.word	0x08008338

08007960 <memset>:
 8007960:	4402      	add	r2, r0
 8007962:	4603      	mov	r3, r0
 8007964:	4293      	cmp	r3, r2
 8007966:	d100      	bne.n	800796a <memset+0xa>
 8007968:	4770      	bx	lr
 800796a:	f803 1b01 	strb.w	r1, [r3], #1
 800796e:	e7f9      	b.n	8007964 <memset+0x4>

08007970 <siprintf>:
 8007970:	b40e      	push	{r1, r2, r3}
 8007972:	b500      	push	{lr}
 8007974:	b09c      	sub	sp, #112	; 0x70
 8007976:	ab1d      	add	r3, sp, #116	; 0x74
 8007978:	9002      	str	r0, [sp, #8]
 800797a:	9006      	str	r0, [sp, #24]
 800797c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007980:	4809      	ldr	r0, [pc, #36]	; (80079a8 <siprintf+0x38>)
 8007982:	9107      	str	r1, [sp, #28]
 8007984:	9104      	str	r1, [sp, #16]
 8007986:	4909      	ldr	r1, [pc, #36]	; (80079ac <siprintf+0x3c>)
 8007988:	f853 2b04 	ldr.w	r2, [r3], #4
 800798c:	9105      	str	r1, [sp, #20]
 800798e:	6800      	ldr	r0, [r0, #0]
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	a902      	add	r1, sp, #8
 8007994:	f000 f868 	bl	8007a68 <_svfiprintf_r>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	b01c      	add	sp, #112	; 0x70
 80079a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a4:	b003      	add	sp, #12
 80079a6:	4770      	bx	lr
 80079a8:	2000000c 	.word	0x2000000c
 80079ac:	ffff0208 	.word	0xffff0208

080079b0 <__ssputs_r>:
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	688e      	ldr	r6, [r1, #8]
 80079b6:	429e      	cmp	r6, r3
 80079b8:	4682      	mov	sl, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	4690      	mov	r8, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	d838      	bhi.n	8007a34 <__ssputs_r+0x84>
 80079c2:	898a      	ldrh	r2, [r1, #12]
 80079c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079c8:	d032      	beq.n	8007a30 <__ssputs_r+0x80>
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	6909      	ldr	r1, [r1, #16]
 80079ce:	eba5 0901 	sub.w	r9, r5, r1
 80079d2:	6965      	ldr	r5, [r4, #20]
 80079d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079dc:	3301      	adds	r3, #1
 80079de:	444b      	add	r3, r9
 80079e0:	106d      	asrs	r5, r5, #1
 80079e2:	429d      	cmp	r5, r3
 80079e4:	bf38      	it	cc
 80079e6:	461d      	movcc	r5, r3
 80079e8:	0553      	lsls	r3, r2, #21
 80079ea:	d531      	bpl.n	8007a50 <__ssputs_r+0xa0>
 80079ec:	4629      	mov	r1, r5
 80079ee:	f000 fb63 	bl	80080b8 <_malloc_r>
 80079f2:	4606      	mov	r6, r0
 80079f4:	b950      	cbnz	r0, 8007a0c <__ssputs_r+0x5c>
 80079f6:	230c      	movs	r3, #12
 80079f8:	f8ca 3000 	str.w	r3, [sl]
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0c:	6921      	ldr	r1, [r4, #16]
 8007a0e:	464a      	mov	r2, r9
 8007a10:	f000 fabe 	bl	8007f90 <memcpy>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	6126      	str	r6, [r4, #16]
 8007a22:	6165      	str	r5, [r4, #20]
 8007a24:	444e      	add	r6, r9
 8007a26:	eba5 0509 	sub.w	r5, r5, r9
 8007a2a:	6026      	str	r6, [r4, #0]
 8007a2c:	60a5      	str	r5, [r4, #8]
 8007a2e:	463e      	mov	r6, r7
 8007a30:	42be      	cmp	r6, r7
 8007a32:	d900      	bls.n	8007a36 <__ssputs_r+0x86>
 8007a34:	463e      	mov	r6, r7
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	f000 fab6 	bl	8007fac <memmove>
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	1b9b      	subs	r3, r3, r6
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	4433      	add	r3, r6
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e7db      	b.n	8007a08 <__ssputs_r+0x58>
 8007a50:	462a      	mov	r2, r5
 8007a52:	f000 fba5 	bl	80081a0 <_realloc_r>
 8007a56:	4606      	mov	r6, r0
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1e1      	bne.n	8007a20 <__ssputs_r+0x70>
 8007a5c:	6921      	ldr	r1, [r4, #16]
 8007a5e:	4650      	mov	r0, sl
 8007a60:	f000 fabe 	bl	8007fe0 <_free_r>
 8007a64:	e7c7      	b.n	80079f6 <__ssputs_r+0x46>
	...

08007a68 <_svfiprintf_r>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	4698      	mov	r8, r3
 8007a6e:	898b      	ldrh	r3, [r1, #12]
 8007a70:	061b      	lsls	r3, r3, #24
 8007a72:	b09d      	sub	sp, #116	; 0x74
 8007a74:	4607      	mov	r7, r0
 8007a76:	460d      	mov	r5, r1
 8007a78:	4614      	mov	r4, r2
 8007a7a:	d50e      	bpl.n	8007a9a <_svfiprintf_r+0x32>
 8007a7c:	690b      	ldr	r3, [r1, #16]
 8007a7e:	b963      	cbnz	r3, 8007a9a <_svfiprintf_r+0x32>
 8007a80:	2140      	movs	r1, #64	; 0x40
 8007a82:	f000 fb19 	bl	80080b8 <_malloc_r>
 8007a86:	6028      	str	r0, [r5, #0]
 8007a88:	6128      	str	r0, [r5, #16]
 8007a8a:	b920      	cbnz	r0, 8007a96 <_svfiprintf_r+0x2e>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	e0d1      	b.n	8007c3a <_svfiprintf_r+0x1d2>
 8007a96:	2340      	movs	r3, #64	; 0x40
 8007a98:	616b      	str	r3, [r5, #20]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9e:	2320      	movs	r3, #32
 8007aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa8:	2330      	movs	r3, #48	; 0x30
 8007aaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c54 <_svfiprintf_r+0x1ec>
 8007aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab2:	f04f 0901 	mov.w	r9, #1
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	469a      	mov	sl, r3
 8007aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007abe:	b10a      	cbz	r2, 8007ac4 <_svfiprintf_r+0x5c>
 8007ac0:	2a25      	cmp	r2, #37	; 0x25
 8007ac2:	d1f9      	bne.n	8007ab8 <_svfiprintf_r+0x50>
 8007ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac8:	d00b      	beq.n	8007ae2 <_svfiprintf_r+0x7a>
 8007aca:	465b      	mov	r3, fp
 8007acc:	4622      	mov	r2, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f7ff ff6d 	bl	80079b0 <__ssputs_r>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f000 80aa 	beq.w	8007c30 <_svfiprintf_r+0x1c8>
 8007adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ade:	445a      	add	r2, fp
 8007ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 80a2 	beq.w	8007c30 <_svfiprintf_r+0x1c8>
 8007aec:	2300      	movs	r3, #0
 8007aee:	f04f 32ff 	mov.w	r2, #4294967295
 8007af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af6:	f10a 0a01 	add.w	sl, sl, #1
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	9307      	str	r3, [sp, #28]
 8007afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b02:	931a      	str	r3, [sp, #104]	; 0x68
 8007b04:	4654      	mov	r4, sl
 8007b06:	2205      	movs	r2, #5
 8007b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0c:	4851      	ldr	r0, [pc, #324]	; (8007c54 <_svfiprintf_r+0x1ec>)
 8007b0e:	f7fd fb67 	bl	80051e0 <memchr>
 8007b12:	9a04      	ldr	r2, [sp, #16]
 8007b14:	b9d8      	cbnz	r0, 8007b4e <_svfiprintf_r+0xe6>
 8007b16:	06d0      	lsls	r0, r2, #27
 8007b18:	bf44      	itt	mi
 8007b1a:	2320      	movmi	r3, #32
 8007b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b20:	0711      	lsls	r1, r2, #28
 8007b22:	bf44      	itt	mi
 8007b24:	232b      	movmi	r3, #43	; 0x2b
 8007b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b30:	d015      	beq.n	8007b5e <_svfiprintf_r+0xf6>
 8007b32:	9a07      	ldr	r2, [sp, #28]
 8007b34:	4654      	mov	r4, sl
 8007b36:	2000      	movs	r0, #0
 8007b38:	f04f 0c0a 	mov.w	ip, #10
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b42:	3b30      	subs	r3, #48	; 0x30
 8007b44:	2b09      	cmp	r3, #9
 8007b46:	d94e      	bls.n	8007be6 <_svfiprintf_r+0x17e>
 8007b48:	b1b0      	cbz	r0, 8007b78 <_svfiprintf_r+0x110>
 8007b4a:	9207      	str	r2, [sp, #28]
 8007b4c:	e014      	b.n	8007b78 <_svfiprintf_r+0x110>
 8007b4e:	eba0 0308 	sub.w	r3, r0, r8
 8007b52:	fa09 f303 	lsl.w	r3, r9, r3
 8007b56:	4313      	orrs	r3, r2
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	46a2      	mov	sl, r4
 8007b5c:	e7d2      	b.n	8007b04 <_svfiprintf_r+0x9c>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	1d19      	adds	r1, r3, #4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	9103      	str	r1, [sp, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bfbb      	ittet	lt
 8007b6a:	425b      	neglt	r3, r3
 8007b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b70:	9307      	strge	r3, [sp, #28]
 8007b72:	9307      	strlt	r3, [sp, #28]
 8007b74:	bfb8      	it	lt
 8007b76:	9204      	strlt	r2, [sp, #16]
 8007b78:	7823      	ldrb	r3, [r4, #0]
 8007b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b7c:	d10c      	bne.n	8007b98 <_svfiprintf_r+0x130>
 8007b7e:	7863      	ldrb	r3, [r4, #1]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d135      	bne.n	8007bf0 <_svfiprintf_r+0x188>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	1d1a      	adds	r2, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	9203      	str	r2, [sp, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfb8      	it	lt
 8007b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b94:	3402      	adds	r4, #2
 8007b96:	9305      	str	r3, [sp, #20]
 8007b98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c64 <_svfiprintf_r+0x1fc>
 8007b9c:	7821      	ldrb	r1, [r4, #0]
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	f7fd fb1d 	bl	80051e0 <memchr>
 8007ba6:	b140      	cbz	r0, 8007bba <_svfiprintf_r+0x152>
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	eba0 000a 	sub.w	r0, r0, sl
 8007bae:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	4303      	orrs	r3, r0
 8007bb6:	3401      	adds	r4, #1
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bbe:	4826      	ldr	r0, [pc, #152]	; (8007c58 <_svfiprintf_r+0x1f0>)
 8007bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc4:	2206      	movs	r2, #6
 8007bc6:	f7fd fb0b 	bl	80051e0 <memchr>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d038      	beq.n	8007c40 <_svfiprintf_r+0x1d8>
 8007bce:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <_svfiprintf_r+0x1f4>)
 8007bd0:	bb1b      	cbnz	r3, 8007c1a <_svfiprintf_r+0x1b2>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	3307      	adds	r3, #7
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	3308      	adds	r3, #8
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be0:	4433      	add	r3, r6
 8007be2:	9309      	str	r3, [sp, #36]	; 0x24
 8007be4:	e767      	b.n	8007ab6 <_svfiprintf_r+0x4e>
 8007be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bea:	460c      	mov	r4, r1
 8007bec:	2001      	movs	r0, #1
 8007bee:	e7a5      	b.n	8007b3c <_svfiprintf_r+0xd4>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	3401      	adds	r4, #1
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f04f 0c0a 	mov.w	ip, #10
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c02:	3a30      	subs	r2, #48	; 0x30
 8007c04:	2a09      	cmp	r2, #9
 8007c06:	d903      	bls.n	8007c10 <_svfiprintf_r+0x1a8>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0c5      	beq.n	8007b98 <_svfiprintf_r+0x130>
 8007c0c:	9105      	str	r1, [sp, #20]
 8007c0e:	e7c3      	b.n	8007b98 <_svfiprintf_r+0x130>
 8007c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c14:	4604      	mov	r4, r0
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7f0      	b.n	8007bfc <_svfiprintf_r+0x194>
 8007c1a:	ab03      	add	r3, sp, #12
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	462a      	mov	r2, r5
 8007c20:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <_svfiprintf_r+0x1f8>)
 8007c22:	a904      	add	r1, sp, #16
 8007c24:	4638      	mov	r0, r7
 8007c26:	f3af 8000 	nop.w
 8007c2a:	1c42      	adds	r2, r0, #1
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	d1d6      	bne.n	8007bde <_svfiprintf_r+0x176>
 8007c30:	89ab      	ldrh	r3, [r5, #12]
 8007c32:	065b      	lsls	r3, r3, #25
 8007c34:	f53f af2c 	bmi.w	8007a90 <_svfiprintf_r+0x28>
 8007c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c3a:	b01d      	add	sp, #116	; 0x74
 8007c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <_svfiprintf_r+0x1f8>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	f000 f87a 	bl	8007d44 <_printf_i>
 8007c50:	e7eb      	b.n	8007c2a <_svfiprintf_r+0x1c2>
 8007c52:	bf00      	nop
 8007c54:	08008300 	.word	0x08008300
 8007c58:	0800830a 	.word	0x0800830a
 8007c5c:	00000000 	.word	0x00000000
 8007c60:	080079b1 	.word	0x080079b1
 8007c64:	08008306 	.word	0x08008306

08007c68 <_printf_common>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	4699      	mov	r9, r3
 8007c70:	688a      	ldr	r2, [r1, #8]
 8007c72:	690b      	ldr	r3, [r1, #16]
 8007c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bfb8      	it	lt
 8007c7c:	4613      	movlt	r3, r2
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c84:	4607      	mov	r7, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	b10a      	cbz	r2, 8007c8e <_printf_common+0x26>
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	0699      	lsls	r1, r3, #26
 8007c92:	bf42      	ittt	mi
 8007c94:	6833      	ldrmi	r3, [r6, #0]
 8007c96:	3302      	addmi	r3, #2
 8007c98:	6033      	strmi	r3, [r6, #0]
 8007c9a:	6825      	ldr	r5, [r4, #0]
 8007c9c:	f015 0506 	ands.w	r5, r5, #6
 8007ca0:	d106      	bne.n	8007cb0 <_printf_common+0x48>
 8007ca2:	f104 0a19 	add.w	sl, r4, #25
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	6832      	ldr	r2, [r6, #0]
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	dc26      	bgt.n	8007cfe <_printf_common+0x96>
 8007cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cb4:	1e13      	subs	r3, r2, #0
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	bf18      	it	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	0692      	lsls	r2, r2, #26
 8007cbe:	d42b      	bmi.n	8007d18 <_printf_common+0xb0>
 8007cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	47c0      	blx	r8
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d01e      	beq.n	8007d0c <_printf_common+0xa4>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	68e5      	ldr	r5, [r4, #12]
 8007cd2:	6832      	ldr	r2, [r6, #0]
 8007cd4:	f003 0306 	and.w	r3, r3, #6
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	bf08      	it	eq
 8007cdc:	1aad      	subeq	r5, r5, r2
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	bf0c      	ite	eq
 8007ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce8:	2500      	movne	r5, #0
 8007cea:	4293      	cmp	r3, r2
 8007cec:	bfc4      	itt	gt
 8007cee:	1a9b      	subgt	r3, r3, r2
 8007cf0:	18ed      	addgt	r5, r5, r3
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	341a      	adds	r4, #26
 8007cf6:	42b5      	cmp	r5, r6
 8007cf8:	d11a      	bne.n	8007d30 <_printf_common+0xc8>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e008      	b.n	8007d10 <_printf_common+0xa8>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4649      	mov	r1, r9
 8007d04:	4638      	mov	r0, r7
 8007d06:	47c0      	blx	r8
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d103      	bne.n	8007d14 <_printf_common+0xac>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	3501      	adds	r5, #1
 8007d16:	e7c6      	b.n	8007ca6 <_printf_common+0x3e>
 8007d18:	18e1      	adds	r1, r4, r3
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	2030      	movs	r0, #48	; 0x30
 8007d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d22:	4422      	add	r2, r4
 8007d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d2c:	3302      	adds	r3, #2
 8007d2e:	e7c7      	b.n	8007cc0 <_printf_common+0x58>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4622      	mov	r2, r4
 8007d34:	4649      	mov	r1, r9
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d0e6      	beq.n	8007d0c <_printf_common+0xa4>
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7d9      	b.n	8007cf6 <_printf_common+0x8e>
	...

08007d44 <_printf_i>:
 8007d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	7e0f      	ldrb	r7, [r1, #24]
 8007d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d4c:	2f78      	cmp	r7, #120	; 0x78
 8007d4e:	4691      	mov	r9, r2
 8007d50:	4680      	mov	r8, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	469a      	mov	sl, r3
 8007d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d5a:	d807      	bhi.n	8007d6c <_printf_i+0x28>
 8007d5c:	2f62      	cmp	r7, #98	; 0x62
 8007d5e:	d80a      	bhi.n	8007d76 <_printf_i+0x32>
 8007d60:	2f00      	cmp	r7, #0
 8007d62:	f000 80d8 	beq.w	8007f16 <_printf_i+0x1d2>
 8007d66:	2f58      	cmp	r7, #88	; 0x58
 8007d68:	f000 80a3 	beq.w	8007eb2 <_printf_i+0x16e>
 8007d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d74:	e03a      	b.n	8007dec <_printf_i+0xa8>
 8007d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d7a:	2b15      	cmp	r3, #21
 8007d7c:	d8f6      	bhi.n	8007d6c <_printf_i+0x28>
 8007d7e:	a101      	add	r1, pc, #4	; (adr r1, 8007d84 <_printf_i+0x40>)
 8007d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d84:	08007ddd 	.word	0x08007ddd
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007d6d 	.word	0x08007d6d
 8007d90:	08007d6d 	.word	0x08007d6d
 8007d94:	08007d6d 	.word	0x08007d6d
 8007d98:	08007d6d 	.word	0x08007d6d
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007d6d 	.word	0x08007d6d
 8007da4:	08007d6d 	.word	0x08007d6d
 8007da8:	08007d6d 	.word	0x08007d6d
 8007dac:	08007d6d 	.word	0x08007d6d
 8007db0:	08007efd 	.word	0x08007efd
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007edf 	.word	0x08007edf
 8007dbc:	08007d6d 	.word	0x08007d6d
 8007dc0:	08007d6d 	.word	0x08007d6d
 8007dc4:	08007f1f 	.word	0x08007f1f
 8007dc8:	08007d6d 	.word	0x08007d6d
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007d6d 	.word	0x08007d6d
 8007dd4:	08007d6d 	.word	0x08007d6d
 8007dd8:	08007ee7 	.word	0x08007ee7
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	1d1a      	adds	r2, r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	602a      	str	r2, [r5, #0]
 8007de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dec:	2301      	movs	r3, #1
 8007dee:	e0a3      	b.n	8007f38 <_printf_i+0x1f4>
 8007df0:	6820      	ldr	r0, [r4, #0]
 8007df2:	6829      	ldr	r1, [r5, #0]
 8007df4:	0606      	lsls	r6, r0, #24
 8007df6:	f101 0304 	add.w	r3, r1, #4
 8007dfa:	d50a      	bpl.n	8007e12 <_printf_i+0xce>
 8007dfc:	680e      	ldr	r6, [r1, #0]
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	2e00      	cmp	r6, #0
 8007e02:	da03      	bge.n	8007e0c <_printf_i+0xc8>
 8007e04:	232d      	movs	r3, #45	; 0x2d
 8007e06:	4276      	negs	r6, r6
 8007e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0c:	485e      	ldr	r0, [pc, #376]	; (8007f88 <_printf_i+0x244>)
 8007e0e:	230a      	movs	r3, #10
 8007e10:	e019      	b.n	8007e46 <_printf_i+0x102>
 8007e12:	680e      	ldr	r6, [r1, #0]
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e1a:	bf18      	it	ne
 8007e1c:	b236      	sxthne	r6, r6
 8007e1e:	e7ef      	b.n	8007e00 <_printf_i+0xbc>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	1d19      	adds	r1, r3, #4
 8007e26:	6029      	str	r1, [r5, #0]
 8007e28:	0601      	lsls	r1, r0, #24
 8007e2a:	d501      	bpl.n	8007e30 <_printf_i+0xec>
 8007e2c:	681e      	ldr	r6, [r3, #0]
 8007e2e:	e002      	b.n	8007e36 <_printf_i+0xf2>
 8007e30:	0646      	lsls	r6, r0, #25
 8007e32:	d5fb      	bpl.n	8007e2c <_printf_i+0xe8>
 8007e34:	881e      	ldrh	r6, [r3, #0]
 8007e36:	4854      	ldr	r0, [pc, #336]	; (8007f88 <_printf_i+0x244>)
 8007e38:	2f6f      	cmp	r7, #111	; 0x6f
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2308      	moveq	r3, #8
 8007e3e:	230a      	movne	r3, #10
 8007e40:	2100      	movs	r1, #0
 8007e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e46:	6865      	ldr	r5, [r4, #4]
 8007e48:	60a5      	str	r5, [r4, #8]
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	bfa2      	ittt	ge
 8007e4e:	6821      	ldrge	r1, [r4, #0]
 8007e50:	f021 0104 	bicge.w	r1, r1, #4
 8007e54:	6021      	strge	r1, [r4, #0]
 8007e56:	b90e      	cbnz	r6, 8007e5c <_printf_i+0x118>
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	d04d      	beq.n	8007ef8 <_printf_i+0x1b4>
 8007e5c:	4615      	mov	r5, r2
 8007e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e62:	fb03 6711 	mls	r7, r3, r1, r6
 8007e66:	5dc7      	ldrb	r7, [r0, r7]
 8007e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e6c:	4637      	mov	r7, r6
 8007e6e:	42bb      	cmp	r3, r7
 8007e70:	460e      	mov	r6, r1
 8007e72:	d9f4      	bls.n	8007e5e <_printf_i+0x11a>
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d10b      	bne.n	8007e90 <_printf_i+0x14c>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	07de      	lsls	r6, r3, #31
 8007e7c:	d508      	bpl.n	8007e90 <_printf_i+0x14c>
 8007e7e:	6923      	ldr	r3, [r4, #16]
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	4299      	cmp	r1, r3
 8007e84:	bfde      	ittt	le
 8007e86:	2330      	movle	r3, #48	; 0x30
 8007e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e90:	1b52      	subs	r2, r2, r5
 8007e92:	6122      	str	r2, [r4, #16]
 8007e94:	f8cd a000 	str.w	sl, [sp]
 8007e98:	464b      	mov	r3, r9
 8007e9a:	aa03      	add	r2, sp, #12
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	f7ff fee2 	bl	8007c68 <_printf_common>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d14c      	bne.n	8007f42 <_printf_i+0x1fe>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	b004      	add	sp, #16
 8007eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb2:	4835      	ldr	r0, [pc, #212]	; (8007f88 <_printf_i+0x244>)
 8007eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007eb8:	6829      	ldr	r1, [r5, #0]
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ec0:	6029      	str	r1, [r5, #0]
 8007ec2:	061d      	lsls	r5, r3, #24
 8007ec4:	d514      	bpl.n	8007ef0 <_printf_i+0x1ac>
 8007ec6:	07df      	lsls	r7, r3, #31
 8007ec8:	bf44      	itt	mi
 8007eca:	f043 0320 	orrmi.w	r3, r3, #32
 8007ece:	6023      	strmi	r3, [r4, #0]
 8007ed0:	b91e      	cbnz	r6, 8007eda <_printf_i+0x196>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f023 0320 	bic.w	r3, r3, #32
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	2310      	movs	r3, #16
 8007edc:	e7b0      	b.n	8007e40 <_printf_i+0xfc>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	f043 0320 	orr.w	r3, r3, #32
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	2378      	movs	r3, #120	; 0x78
 8007ee8:	4828      	ldr	r0, [pc, #160]	; (8007f8c <_printf_i+0x248>)
 8007eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eee:	e7e3      	b.n	8007eb8 <_printf_i+0x174>
 8007ef0:	0659      	lsls	r1, r3, #25
 8007ef2:	bf48      	it	mi
 8007ef4:	b2b6      	uxthmi	r6, r6
 8007ef6:	e7e6      	b.n	8007ec6 <_printf_i+0x182>
 8007ef8:	4615      	mov	r5, r2
 8007efa:	e7bb      	b.n	8007e74 <_printf_i+0x130>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	6826      	ldr	r6, [r4, #0]
 8007f00:	6961      	ldr	r1, [r4, #20]
 8007f02:	1d18      	adds	r0, r3, #4
 8007f04:	6028      	str	r0, [r5, #0]
 8007f06:	0635      	lsls	r5, r6, #24
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	d501      	bpl.n	8007f10 <_printf_i+0x1cc>
 8007f0c:	6019      	str	r1, [r3, #0]
 8007f0e:	e002      	b.n	8007f16 <_printf_i+0x1d2>
 8007f10:	0670      	lsls	r0, r6, #25
 8007f12:	d5fb      	bpl.n	8007f0c <_printf_i+0x1c8>
 8007f14:	8019      	strh	r1, [r3, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	4615      	mov	r5, r2
 8007f1c:	e7ba      	b.n	8007e94 <_printf_i+0x150>
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	1d1a      	adds	r2, r3, #4
 8007f22:	602a      	str	r2, [r5, #0]
 8007f24:	681d      	ldr	r5, [r3, #0]
 8007f26:	6862      	ldr	r2, [r4, #4]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f7fd f958 	bl	80051e0 <memchr>
 8007f30:	b108      	cbz	r0, 8007f36 <_printf_i+0x1f2>
 8007f32:	1b40      	subs	r0, r0, r5
 8007f34:	6060      	str	r0, [r4, #4]
 8007f36:	6863      	ldr	r3, [r4, #4]
 8007f38:	6123      	str	r3, [r4, #16]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f40:	e7a8      	b.n	8007e94 <_printf_i+0x150>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4649      	mov	r1, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	47d0      	blx	sl
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d0ab      	beq.n	8007ea8 <_printf_i+0x164>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	079b      	lsls	r3, r3, #30
 8007f54:	d413      	bmi.n	8007f7e <_printf_i+0x23a>
 8007f56:	68e0      	ldr	r0, [r4, #12]
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	4298      	cmp	r0, r3
 8007f5c:	bfb8      	it	lt
 8007f5e:	4618      	movlt	r0, r3
 8007f60:	e7a4      	b.n	8007eac <_printf_i+0x168>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4632      	mov	r2, r6
 8007f66:	4649      	mov	r1, r9
 8007f68:	4640      	mov	r0, r8
 8007f6a:	47d0      	blx	sl
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d09b      	beq.n	8007ea8 <_printf_i+0x164>
 8007f70:	3501      	adds	r5, #1
 8007f72:	68e3      	ldr	r3, [r4, #12]
 8007f74:	9903      	ldr	r1, [sp, #12]
 8007f76:	1a5b      	subs	r3, r3, r1
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	dcf2      	bgt.n	8007f62 <_printf_i+0x21e>
 8007f7c:	e7eb      	b.n	8007f56 <_printf_i+0x212>
 8007f7e:	2500      	movs	r5, #0
 8007f80:	f104 0619 	add.w	r6, r4, #25
 8007f84:	e7f5      	b.n	8007f72 <_printf_i+0x22e>
 8007f86:	bf00      	nop
 8007f88:	08008311 	.word	0x08008311
 8007f8c:	08008322 	.word	0x08008322

08007f90 <memcpy>:
 8007f90:	440a      	add	r2, r1
 8007f92:	4291      	cmp	r1, r2
 8007f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f98:	d100      	bne.n	8007f9c <memcpy+0xc>
 8007f9a:	4770      	bx	lr
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	d1f9      	bne.n	8007f9e <memcpy+0xe>
 8007faa:	bd10      	pop	{r4, pc}

08007fac <memmove>:
 8007fac:	4288      	cmp	r0, r1
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	eb01 0402 	add.w	r4, r1, r2
 8007fb4:	d902      	bls.n	8007fbc <memmove+0x10>
 8007fb6:	4284      	cmp	r4, r0
 8007fb8:	4623      	mov	r3, r4
 8007fba:	d807      	bhi.n	8007fcc <memmove+0x20>
 8007fbc:	1e43      	subs	r3, r0, #1
 8007fbe:	42a1      	cmp	r1, r4
 8007fc0:	d008      	beq.n	8007fd4 <memmove+0x28>
 8007fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fca:	e7f8      	b.n	8007fbe <memmove+0x12>
 8007fcc:	4402      	add	r2, r0
 8007fce:	4601      	mov	r1, r0
 8007fd0:	428a      	cmp	r2, r1
 8007fd2:	d100      	bne.n	8007fd6 <memmove+0x2a>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fde:	e7f7      	b.n	8007fd0 <memmove+0x24>

08007fe0 <_free_r>:
 8007fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d044      	beq.n	8008070 <_free_r+0x90>
 8007fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fea:	9001      	str	r0, [sp, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f1a1 0404 	sub.w	r4, r1, #4
 8007ff2:	bfb8      	it	lt
 8007ff4:	18e4      	addlt	r4, r4, r3
 8007ff6:	f000 f913 	bl	8008220 <__malloc_lock>
 8007ffa:	4a1e      	ldr	r2, [pc, #120]	; (8008074 <_free_r+0x94>)
 8007ffc:	9801      	ldr	r0, [sp, #4]
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	b933      	cbnz	r3, 8008010 <_free_r+0x30>
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	6014      	str	r4, [r2, #0]
 8008006:	b003      	add	sp, #12
 8008008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800800c:	f000 b90e 	b.w	800822c <__malloc_unlock>
 8008010:	42a3      	cmp	r3, r4
 8008012:	d908      	bls.n	8008026 <_free_r+0x46>
 8008014:	6825      	ldr	r5, [r4, #0]
 8008016:	1961      	adds	r1, r4, r5
 8008018:	428b      	cmp	r3, r1
 800801a:	bf01      	itttt	eq
 800801c:	6819      	ldreq	r1, [r3, #0]
 800801e:	685b      	ldreq	r3, [r3, #4]
 8008020:	1949      	addeq	r1, r1, r5
 8008022:	6021      	streq	r1, [r4, #0]
 8008024:	e7ed      	b.n	8008002 <_free_r+0x22>
 8008026:	461a      	mov	r2, r3
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	b10b      	cbz	r3, 8008030 <_free_r+0x50>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d9fa      	bls.n	8008026 <_free_r+0x46>
 8008030:	6811      	ldr	r1, [r2, #0]
 8008032:	1855      	adds	r5, r2, r1
 8008034:	42a5      	cmp	r5, r4
 8008036:	d10b      	bne.n	8008050 <_free_r+0x70>
 8008038:	6824      	ldr	r4, [r4, #0]
 800803a:	4421      	add	r1, r4
 800803c:	1854      	adds	r4, r2, r1
 800803e:	42a3      	cmp	r3, r4
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	d1e0      	bne.n	8008006 <_free_r+0x26>
 8008044:	681c      	ldr	r4, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	6053      	str	r3, [r2, #4]
 800804a:	4421      	add	r1, r4
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	e7da      	b.n	8008006 <_free_r+0x26>
 8008050:	d902      	bls.n	8008058 <_free_r+0x78>
 8008052:	230c      	movs	r3, #12
 8008054:	6003      	str	r3, [r0, #0]
 8008056:	e7d6      	b.n	8008006 <_free_r+0x26>
 8008058:	6825      	ldr	r5, [r4, #0]
 800805a:	1961      	adds	r1, r4, r5
 800805c:	428b      	cmp	r3, r1
 800805e:	bf04      	itt	eq
 8008060:	6819      	ldreq	r1, [r3, #0]
 8008062:	685b      	ldreq	r3, [r3, #4]
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	bf04      	itt	eq
 8008068:	1949      	addeq	r1, r1, r5
 800806a:	6021      	streq	r1, [r4, #0]
 800806c:	6054      	str	r4, [r2, #4]
 800806e:	e7ca      	b.n	8008006 <_free_r+0x26>
 8008070:	b003      	add	sp, #12
 8008072:	bd30      	pop	{r4, r5, pc}
 8008074:	2000014c 	.word	0x2000014c

08008078 <sbrk_aligned>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4e0e      	ldr	r6, [pc, #56]	; (80080b4 <sbrk_aligned+0x3c>)
 800807c:	460c      	mov	r4, r1
 800807e:	6831      	ldr	r1, [r6, #0]
 8008080:	4605      	mov	r5, r0
 8008082:	b911      	cbnz	r1, 800808a <sbrk_aligned+0x12>
 8008084:	f000 f8bc 	bl	8008200 <_sbrk_r>
 8008088:	6030      	str	r0, [r6, #0]
 800808a:	4621      	mov	r1, r4
 800808c:	4628      	mov	r0, r5
 800808e:	f000 f8b7 	bl	8008200 <_sbrk_r>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d00a      	beq.n	80080ac <sbrk_aligned+0x34>
 8008096:	1cc4      	adds	r4, r0, #3
 8008098:	f024 0403 	bic.w	r4, r4, #3
 800809c:	42a0      	cmp	r0, r4
 800809e:	d007      	beq.n	80080b0 <sbrk_aligned+0x38>
 80080a0:	1a21      	subs	r1, r4, r0
 80080a2:	4628      	mov	r0, r5
 80080a4:	f000 f8ac 	bl	8008200 <_sbrk_r>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d101      	bne.n	80080b0 <sbrk_aligned+0x38>
 80080ac:	f04f 34ff 	mov.w	r4, #4294967295
 80080b0:	4620      	mov	r0, r4
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	20000150 	.word	0x20000150

080080b8 <_malloc_r>:
 80080b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080bc:	1ccd      	adds	r5, r1, #3
 80080be:	f025 0503 	bic.w	r5, r5, #3
 80080c2:	3508      	adds	r5, #8
 80080c4:	2d0c      	cmp	r5, #12
 80080c6:	bf38      	it	cc
 80080c8:	250c      	movcc	r5, #12
 80080ca:	2d00      	cmp	r5, #0
 80080cc:	4607      	mov	r7, r0
 80080ce:	db01      	blt.n	80080d4 <_malloc_r+0x1c>
 80080d0:	42a9      	cmp	r1, r5
 80080d2:	d905      	bls.n	80080e0 <_malloc_r+0x28>
 80080d4:	230c      	movs	r3, #12
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	2600      	movs	r6, #0
 80080da:	4630      	mov	r0, r6
 80080dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e0:	4e2e      	ldr	r6, [pc, #184]	; (800819c <_malloc_r+0xe4>)
 80080e2:	f000 f89d 	bl	8008220 <__malloc_lock>
 80080e6:	6833      	ldr	r3, [r6, #0]
 80080e8:	461c      	mov	r4, r3
 80080ea:	bb34      	cbnz	r4, 800813a <_malloc_r+0x82>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4638      	mov	r0, r7
 80080f0:	f7ff ffc2 	bl	8008078 <sbrk_aligned>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	4604      	mov	r4, r0
 80080f8:	d14d      	bne.n	8008196 <_malloc_r+0xde>
 80080fa:	6834      	ldr	r4, [r6, #0]
 80080fc:	4626      	mov	r6, r4
 80080fe:	2e00      	cmp	r6, #0
 8008100:	d140      	bne.n	8008184 <_malloc_r+0xcc>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	4631      	mov	r1, r6
 8008106:	4638      	mov	r0, r7
 8008108:	eb04 0803 	add.w	r8, r4, r3
 800810c:	f000 f878 	bl	8008200 <_sbrk_r>
 8008110:	4580      	cmp	r8, r0
 8008112:	d13a      	bne.n	800818a <_malloc_r+0xd2>
 8008114:	6821      	ldr	r1, [r4, #0]
 8008116:	3503      	adds	r5, #3
 8008118:	1a6d      	subs	r5, r5, r1
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	4629      	mov	r1, r5
 8008128:	4638      	mov	r0, r7
 800812a:	f7ff ffa5 	bl	8008078 <sbrk_aligned>
 800812e:	3001      	adds	r0, #1
 8008130:	d02b      	beq.n	800818a <_malloc_r+0xd2>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	442b      	add	r3, r5
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	e00e      	b.n	8008158 <_malloc_r+0xa0>
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	1b52      	subs	r2, r2, r5
 800813e:	d41e      	bmi.n	800817e <_malloc_r+0xc6>
 8008140:	2a0b      	cmp	r2, #11
 8008142:	d916      	bls.n	8008172 <_malloc_r+0xba>
 8008144:	1961      	adds	r1, r4, r5
 8008146:	42a3      	cmp	r3, r4
 8008148:	6025      	str	r5, [r4, #0]
 800814a:	bf18      	it	ne
 800814c:	6059      	strne	r1, [r3, #4]
 800814e:	6863      	ldr	r3, [r4, #4]
 8008150:	bf08      	it	eq
 8008152:	6031      	streq	r1, [r6, #0]
 8008154:	5162      	str	r2, [r4, r5]
 8008156:	604b      	str	r3, [r1, #4]
 8008158:	4638      	mov	r0, r7
 800815a:	f104 060b 	add.w	r6, r4, #11
 800815e:	f000 f865 	bl	800822c <__malloc_unlock>
 8008162:	f026 0607 	bic.w	r6, r6, #7
 8008166:	1d23      	adds	r3, r4, #4
 8008168:	1af2      	subs	r2, r6, r3
 800816a:	d0b6      	beq.n	80080da <_malloc_r+0x22>
 800816c:	1b9b      	subs	r3, r3, r6
 800816e:	50a3      	str	r3, [r4, r2]
 8008170:	e7b3      	b.n	80080da <_malloc_r+0x22>
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	42a3      	cmp	r3, r4
 8008176:	bf0c      	ite	eq
 8008178:	6032      	streq	r2, [r6, #0]
 800817a:	605a      	strne	r2, [r3, #4]
 800817c:	e7ec      	b.n	8008158 <_malloc_r+0xa0>
 800817e:	4623      	mov	r3, r4
 8008180:	6864      	ldr	r4, [r4, #4]
 8008182:	e7b2      	b.n	80080ea <_malloc_r+0x32>
 8008184:	4634      	mov	r4, r6
 8008186:	6876      	ldr	r6, [r6, #4]
 8008188:	e7b9      	b.n	80080fe <_malloc_r+0x46>
 800818a:	230c      	movs	r3, #12
 800818c:	603b      	str	r3, [r7, #0]
 800818e:	4638      	mov	r0, r7
 8008190:	f000 f84c 	bl	800822c <__malloc_unlock>
 8008194:	e7a1      	b.n	80080da <_malloc_r+0x22>
 8008196:	6025      	str	r5, [r4, #0]
 8008198:	e7de      	b.n	8008158 <_malloc_r+0xa0>
 800819a:	bf00      	nop
 800819c:	2000014c 	.word	0x2000014c

080081a0 <_realloc_r>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	4680      	mov	r8, r0
 80081a6:	4614      	mov	r4, r2
 80081a8:	460e      	mov	r6, r1
 80081aa:	b921      	cbnz	r1, 80081b6 <_realloc_r+0x16>
 80081ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b0:	4611      	mov	r1, r2
 80081b2:	f7ff bf81 	b.w	80080b8 <_malloc_r>
 80081b6:	b92a      	cbnz	r2, 80081c4 <_realloc_r+0x24>
 80081b8:	f7ff ff12 	bl	8007fe0 <_free_r>
 80081bc:	4625      	mov	r5, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c4:	f000 f838 	bl	8008238 <_malloc_usable_size_r>
 80081c8:	4284      	cmp	r4, r0
 80081ca:	4607      	mov	r7, r0
 80081cc:	d802      	bhi.n	80081d4 <_realloc_r+0x34>
 80081ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081d2:	d812      	bhi.n	80081fa <_realloc_r+0x5a>
 80081d4:	4621      	mov	r1, r4
 80081d6:	4640      	mov	r0, r8
 80081d8:	f7ff ff6e 	bl	80080b8 <_malloc_r>
 80081dc:	4605      	mov	r5, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d0ed      	beq.n	80081be <_realloc_r+0x1e>
 80081e2:	42bc      	cmp	r4, r7
 80081e4:	4622      	mov	r2, r4
 80081e6:	4631      	mov	r1, r6
 80081e8:	bf28      	it	cs
 80081ea:	463a      	movcs	r2, r7
 80081ec:	f7ff fed0 	bl	8007f90 <memcpy>
 80081f0:	4631      	mov	r1, r6
 80081f2:	4640      	mov	r0, r8
 80081f4:	f7ff fef4 	bl	8007fe0 <_free_r>
 80081f8:	e7e1      	b.n	80081be <_realloc_r+0x1e>
 80081fa:	4635      	mov	r5, r6
 80081fc:	e7df      	b.n	80081be <_realloc_r+0x1e>
	...

08008200 <_sbrk_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_sbrk_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fd f9f6 	bl	80055fc <_sbrk>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_sbrk_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_sbrk_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000154 	.word	0x20000154

08008220 <__malloc_lock>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__malloc_lock+0x8>)
 8008222:	f000 b811 	b.w	8008248 <__retarget_lock_acquire_recursive>
 8008226:	bf00      	nop
 8008228:	20000158 	.word	0x20000158

0800822c <__malloc_unlock>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__malloc_unlock+0x8>)
 800822e:	f000 b80c 	b.w	800824a <__retarget_lock_release_recursive>
 8008232:	bf00      	nop
 8008234:	20000158 	.word	0x20000158

08008238 <_malloc_usable_size_r>:
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f18      	subs	r0, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfbc      	itt	lt
 8008242:	580b      	ldrlt	r3, [r1, r0]
 8008244:	18c0      	addlt	r0, r0, r3
 8008246:	4770      	bx	lr

08008248 <__retarget_lock_acquire_recursive>:
 8008248:	4770      	bx	lr

0800824a <__retarget_lock_release_recursive>:
 800824a:	4770      	bx	lr

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr
